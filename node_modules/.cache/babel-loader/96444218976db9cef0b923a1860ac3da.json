{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { divProperties, getNativeProps } from '../../Utilities';\nimport { ResizeGroupDirection } from './ResizeGroup.types';\nimport { useConst, useMergedRefs, useAsync, useOnEvent, useWarnings } from '@fluentui/react-hooks';\nimport { useWindow } from '../../WindowProvider';\nvar RESIZE_DELAY = 16;\n/**\n * Returns a simple object is able to store measurements with a given key.\n */\n\nexport var getMeasurementCache = function () {\n  var measurementsCache = {};\n  return {\n    /**\n     * Checks if the provided data has a cacheKey. If it has a cacheKey and there is a\n     * corresponding entry in the measurementsCache, then it will return that value.\n     * Returns undefined otherwise.\n     */\n    getCachedMeasurement: function (data) {\n      if (data && data.cacheKey && measurementsCache.hasOwnProperty(data.cacheKey)) {\n        return measurementsCache[data.cacheKey];\n      }\n\n      return undefined;\n    },\n\n    /**\n     * Should be called whenever there is a new measurement associated with a given data object.\n     * If the data has a cacheKey, store that measurement in the measurementsCache.\n     */\n    addMeasurementToCache: function (data, measurement) {\n      if (data.cacheKey) {\n        measurementsCache[data.cacheKey] = measurement;\n      }\n    }\n  };\n};\n/**\n * Returns a function that is able to compute the next state for the ResizeGroup given the current\n * state and any measurement updates.\n */\n\nexport var getNextResizeGroupStateProvider = function (measurementCache) {\n  if (measurementCache === void 0) {\n    measurementCache = getMeasurementCache();\n  }\n\n  var _measurementCache = measurementCache;\n\n  var _containerDimension;\n  /**\n   * Gets the width/height of the data rendered in a hidden div.\n   * @param measuredData - The data corresponding to the measurement we wish to take.\n   * @param getElementToMeasureDimension - A function that returns the measurement of the rendered data.\n   * Only called when the measurement is not in the cache.\n   */\n\n\n  function _getMeasuredDimension(measuredData, getElementToMeasureDimension) {\n    var cachedDimension = _measurementCache.getCachedMeasurement(measuredData);\n\n    if (cachedDimension !== undefined) {\n      return cachedDimension;\n    }\n\n    var measuredDimension = getElementToMeasureDimension();\n\n    _measurementCache.addMeasurementToCache(measuredData, measuredDimension);\n\n    return measuredDimension;\n  }\n  /**\n   * Will get the next IResizeGroupState based on the current data while trying to shrink contents\n   * to fit in the container.\n   * @param data - The initial data point to start measuring.\n   * @param onReduceData - Function that transforms the data into something that should render with less width/height.\n   * @param getElementToMeasureDimension - A function that returns the measurement of the rendered data.\n   * Only called when the measurement is not in the cache.\n   */\n\n\n  function _shrinkContentsUntilTheyFit(data, onReduceData, getElementToMeasureDimension) {\n    var dataToMeasure = data;\n\n    var measuredDimension = _getMeasuredDimension(data, getElementToMeasureDimension);\n\n    while (measuredDimension > _containerDimension) {\n      var nextMeasuredData = onReduceData(dataToMeasure); // We don't want to get stuck in an infinite render loop when there are no more\n      // scaling steps, so implementations of onReduceData should return undefined when\n      // there are no more scaling states to apply.\n\n      if (nextMeasuredData === undefined) {\n        return {\n          renderedData: dataToMeasure,\n          resizeDirection: undefined,\n          dataToMeasure: undefined\n        };\n      }\n\n      measuredDimension = _measurementCache.getCachedMeasurement(nextMeasuredData); // If the measurement isn't in the cache, we need to re-render with some data in a hidden div\n\n      if (measuredDimension === undefined) {\n        return {\n          dataToMeasure: nextMeasuredData,\n          resizeDirection: 'shrink'\n        };\n      }\n\n      dataToMeasure = nextMeasuredData;\n    }\n\n    return {\n      renderedData: dataToMeasure,\n      resizeDirection: undefined,\n      dataToMeasure: undefined\n    };\n  }\n  /**\n   * This function should be called when the state changes in a manner that might allow for more content to fit\n   * on the screen, such as the window width/height growing.\n   * @param data - The initial data point to start measuring.\n   * @param onGrowData - Function that transforms the data into something that may take up more space when rendering.\n   * @param getElementToMeasureDimension - A function that returns the measurement of the rendered data.\n   * Only called when the measurement is not in the cache.\n   */\n\n\n  function _growDataUntilItDoesNotFit(data, onGrowData, getElementToMeasureDimension, onReduceData) {\n    var dataToMeasure = data;\n\n    var measuredDimension = _getMeasuredDimension(data, getElementToMeasureDimension);\n\n    while (measuredDimension < _containerDimension) {\n      var nextMeasuredData = onGrowData(dataToMeasure); // We don't want to get stuck in an infinite render loop when there are no more\n      // scaling steps, so implementations of onGrowData should return undefined when\n      // there are no more scaling states to apply.\n\n      if (nextMeasuredData === undefined) {\n        return {\n          renderedData: dataToMeasure,\n          resizeDirection: undefined,\n          dataToMeasure: undefined\n        };\n      }\n\n      measuredDimension = _measurementCache.getCachedMeasurement(nextMeasuredData); // If the measurement isn't in the cache, we need to re-render with some data in a hidden div\n\n      if (measuredDimension === undefined) {\n        return {\n          dataToMeasure: nextMeasuredData\n        };\n      }\n\n      dataToMeasure = nextMeasuredData;\n    } // Once the loop is done, we should now shrink until the contents fit.\n\n\n    return __assign({\n      resizeDirection: 'shrink'\n    }, _shrinkContentsUntilTheyFit(dataToMeasure, onReduceData, getElementToMeasureDimension));\n  }\n  /**\n   * Handles an update to the container width/height.\n   * Should only be called when we knew the previous container width/height.\n   * @param newDimension - The new width/height of the container.\n   * @param fullDimensionData - The initial data passed in as a prop to resizeGroup.\n   * @param renderedData - The data that was rendered prior to the container size changing.\n   * @param onGrowData - Set to true if the Resize group has an onGrowData function.\n   */\n\n\n  function _updateContainerDimension(newDimension, fullDimensionData, renderedData, onGrowData) {\n    var nextState;\n\n    if (newDimension > _containerDimension) {\n      if (onGrowData) {\n        nextState = {\n          resizeDirection: 'grow',\n          dataToMeasure: onGrowData(renderedData)\n        };\n      } else {\n        nextState = {\n          resizeDirection: 'shrink',\n          dataToMeasure: fullDimensionData\n        };\n      }\n    } else {\n      nextState = {\n        resizeDirection: 'shrink',\n        dataToMeasure: renderedData\n      };\n    }\n\n    _containerDimension = newDimension;\n    return __assign(__assign({}, nextState), {\n      measureContainer: false\n    });\n  }\n\n  function getNextState(props, currentState, getElementToMeasureDimension, newContainerDimension) {\n    // If there is no new container width/height or data to measure, there is no need for a new state update\n    if (newContainerDimension === undefined && currentState.dataToMeasure === undefined) {\n      return undefined;\n    }\n\n    if (newContainerDimension) {\n      // If we know the last container size and we rendered data at that width/height, we can do an optimized render\n      if (_containerDimension && currentState.renderedData && !currentState.dataToMeasure) {\n        return __assign(__assign({}, currentState), _updateContainerDimension(newContainerDimension, props.data, currentState.renderedData, props.onGrowData));\n      } // If we are just setting the container width/height for the first time, we can't do any optimizations\n\n\n      _containerDimension = newContainerDimension;\n    }\n\n    var nextState = __assign(__assign({}, currentState), {\n      measureContainer: false\n    });\n\n    if (currentState.dataToMeasure) {\n      if (currentState.resizeDirection === 'grow' && props.onGrowData) {\n        nextState = __assign(__assign({}, nextState), _growDataUntilItDoesNotFit(currentState.dataToMeasure, props.onGrowData, getElementToMeasureDimension, props.onReduceData));\n      } else {\n        nextState = __assign(__assign({}, nextState), _shrinkContentsUntilTheyFit(currentState.dataToMeasure, props.onReduceData, getElementToMeasureDimension));\n      }\n    }\n\n    return nextState;\n  }\n  /** Function that determines if we need to render content for measurement based on the measurement cache contents. */\n\n\n  function shouldRenderDataForMeasurement(dataToMeasure) {\n    if (!dataToMeasure || _measurementCache.getCachedMeasurement(dataToMeasure) !== undefined) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function getInitialResizeGroupState(data) {\n    return {\n      dataToMeasure: __assign({}, data),\n      resizeDirection: 'grow',\n      measureContainer: true\n    };\n  }\n\n  return {\n    getNextState: getNextState,\n    shouldRenderDataForMeasurement: shouldRenderDataForMeasurement,\n    getInitialResizeGroupState: getInitialResizeGroupState\n  };\n}; // Provides a context property that (if true) tells any child components that\n// they are only being used for measurement purposes and will not be visible.\n\nexport var MeasuredContext = React.createContext({\n  isMeasured: false\n}); // Styles for the hidden div used for measurement\n\nvar hiddenDivStyles = {\n  position: 'fixed',\n  visibility: 'hidden'\n};\nvar hiddenParentStyles = {\n  position: 'relative'\n};\nvar COMPONENT_NAME = 'ResizeGroup';\n/**\n * Use useReducer instead of userState because React is not batching the state updates\n * when state is set in callbacks of setTimeout or requestAnimationFrame.\n * See issue: https://github.com/facebook/react/issues/14259\n */\n\nfunction resizeDataReducer(state, action) {\n  var _a;\n\n  switch (action.type) {\n    case 'resizeData':\n      return __assign({}, action.value);\n\n    case 'dataToMeasure':\n      return __assign(__assign({}, state), {\n        dataToMeasure: action.value,\n        resizeDirection: 'grow',\n        measureContainer: true\n      });\n\n    default:\n      return __assign(__assign({}, state), (_a = {}, _a[action.type] = action.value, _a));\n  }\n}\n\nfunction useResizeState(props, nextResizeGroupStateProvider, rootRef) {\n  var initialStateData = useConst(function () {\n    return nextResizeGroupStateProvider.getInitialResizeGroupState(props.data);\n  });\n\n  var _a = React.useReducer(resizeDataReducer, initialStateData),\n      resizeData = _a[0],\n      dispatchResizeDataAction = _a[1]; // Reset state when new data is provided\n\n\n  React.useEffect(function () {\n    dispatchResizeDataAction({\n      type: 'dataToMeasure',\n      value: props.data\n    });\n  }, [props.data]); // Because it's possible that we may force more than one re-render per animation frame, we\n  // want to make sure that the RAF request is using the most recent data.\n\n  var stateRef = React.useRef(initialStateData);\n  stateRef.current = __assign({}, resizeData);\n  var updateResizeState = React.useCallback(function (nextState) {\n    if (nextState) {\n      dispatchResizeDataAction({\n        type: 'resizeData',\n        value: nextState\n      });\n    }\n  }, []);\n  var remeasure = React.useCallback(function () {\n    if (rootRef.current) {\n      dispatchResizeDataAction({\n        type: 'measureContainer',\n        value: true\n      });\n    }\n  }, [rootRef]);\n  return [stateRef, updateResizeState, remeasure];\n}\n\nfunction useResizingBehavior(props, rootRef) {\n  var nextResizeGroupStateProvider = useConst(getNextResizeGroupStateProvider); // A div that can be used for the initial measurement so that we can avoid mounting a second instance\n  // of the component being measured for the initial render.\n\n  var initialHiddenDiv = React.useRef(null); // A hidden div that is used for mounting a new instance of the component for measurement in a hidden\n  // div without unmounting the currently visible content.\n\n  var updateHiddenDiv = React.useRef(null); // Tracks if any content has been rendered to the user. This enables us to do some performance optimizations\n  // for the initial render.\n\n  var hasRenderedContent = React.useRef(false);\n  var async = useAsync();\n\n  var _a = useResizeState(props, nextResizeGroupStateProvider, rootRef),\n      stateRef = _a[0],\n      updateResizeState = _a[1],\n      remeasure = _a[2];\n\n  React.useEffect(function () {\n    var _a;\n\n    if (stateRef.current.renderedData) {\n      hasRenderedContent.current = true;\n      (_a = props.dataDidRender) === null || _a === void 0 ? void 0 : _a.call(props, stateRef.current.renderedData);\n    }\n  });\n  React.useEffect(function () {\n    async.requestAnimationFrame(function () {\n      var containerDimension = undefined;\n\n      if (stateRef.current.measureContainer && rootRef.current) {\n        var boundingRect = rootRef.current.getBoundingClientRect();\n        containerDimension = props.direction === ResizeGroupDirection.vertical ? boundingRect.height : boundingRect.width;\n      }\n\n      var nextState = nextResizeGroupStateProvider.getNextState(props, stateRef.current, function () {\n        var refToMeasure = !hasRenderedContent.current ? initialHiddenDiv : updateHiddenDiv;\n\n        if (!refToMeasure.current) {\n          return 0;\n        }\n\n        var measuredBoundingRect = refToMeasure.current.getBoundingClientRect();\n        return props.direction === ResizeGroupDirection.vertical ? measuredBoundingRect.height : measuredBoundingRect.width;\n      }, containerDimension);\n      updateResizeState(nextState);\n    }, rootRef.current);\n  });\n  var win = useWindow();\n  useOnEvent(win, 'resize', async.debounce(remeasure, RESIZE_DELAY, {\n    leading: true\n  }));\n  var dataNeedsMeasuring = nextResizeGroupStateProvider.shouldRenderDataForMeasurement(stateRef.current.dataToMeasure);\n  var isInitialMeasure = !hasRenderedContent.current && dataNeedsMeasuring;\n  return [stateRef.current.dataToMeasure, stateRef.current.renderedData, remeasure, initialHiddenDiv, updateHiddenDiv, dataNeedsMeasuring, isInitialMeasure];\n}\n\nfunction useDebugWarnings(props) {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: COMPONENT_NAME,\n      props: props,\n      deprecations: {\n        styles: 'className'\n      }\n    });\n  }\n}\n\nvar measuredContextValue = {\n  isMeasured: true\n};\nexport var ResizeGroupBase = React.forwardRef(function (props, forwardedRef) {\n  var rootRef = React.useRef(null); // The root div which is the container inside of which we are trying to fit content.\n\n  var mergedRootRef = useMergedRefs(rootRef, forwardedRef);\n\n  var _a = useResizingBehavior(props, rootRef),\n      dataToMeasure = _a[0],\n      renderedData = _a[1],\n      remeasure = _a[2],\n      initialHiddenDiv = _a[3],\n      updateHiddenDiv = _a[4],\n      dataNeedsMeasuring = _a[5],\n      isInitialMeasure = _a[6];\n\n  React.useImperativeHandle(props.componentRef, function () {\n    return {\n      remeasure: remeasure\n    };\n  }, [remeasure]);\n  useDebugWarnings(props);\n  var className = props.className,\n      onRenderData = props.onRenderData;\n  var divProps = getNativeProps(props, divProperties, ['data']); // We only ever render the final content to the user. All measurements are done in a hidden div.\n  // For the initial render, we want this to be as fast as possible, so we need to make sure that we only mount one\n  // version of the component for measurement and the final render. For renders that update what is on screen, we\n  // want to make sure that there are no jarring effects such as the screen flashing as we apply scaling steps for\n  // measurement. In the update case, we mount a second version of the component just for measurement purposes and\n  // leave the rendered content untouched until we know the next state to show to the user.\n\n  return React.createElement(\"div\", __assign({}, divProps, {\n    className: className,\n    ref: mergedRootRef\n  }), React.createElement(\"div\", {\n    style: hiddenParentStyles\n  }, dataNeedsMeasuring && !isInitialMeasure && React.createElement(\"div\", {\n    style: hiddenDivStyles,\n    ref: updateHiddenDiv\n  }, React.createElement(MeasuredContext.Provider, {\n    value: measuredContextValue\n  }, onRenderData(dataToMeasure))), React.createElement(\"div\", {\n    ref: initialHiddenDiv,\n    style: isInitialMeasure ? hiddenDivStyles : undefined,\n    \"data-automation-id\": \"visibleContent\"\n  }, isInitialMeasure ? onRenderData(dataToMeasure) : renderedData && onRenderData(renderedData))));\n});\nResizeGroupBase.displayName = 'ResizeGroupBase';","map":{"version":3,"mappings":"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","names":["React","divProperties","getNativeProps","ResizeGroupDirection","useConst","useMergedRefs","useAsync","useOnEvent","useWarnings","useWindow","RESIZE_DELAY","getMeasurementCache","measurementsCache","getCachedMeasurement","data","cacheKey","hasOwnProperty","undefined","addMeasurementToCache","measurement","getNextResizeGroupStateProvider","measurementCache","_measurementCache","_containerDimension","_getMeasuredDimension","measuredData","getElementToMeasureDimension","cachedDimension","measuredDimension","_shrinkContentsUntilTheyFit","onReduceData","dataToMeasure","nextMeasuredData","renderedData","resizeDirection","_growDataUntilItDoesNotFit","onGrowData","_updateContainerDimension","newDimension","fullDimensionData","nextState","measureContainer","getNextState","props","currentState","newContainerDimension","shouldRenderDataForMeasurement","getInitialResizeGroupState","MeasuredContext","createContext","isMeasured","hiddenDivStyles","position","visibility","hiddenParentStyles","COMPONENT_NAME","resizeDataReducer","state","action","type","value","_a","useResizeState","nextResizeGroupStateProvider","rootRef","initialStateData","useReducer","resizeData","dispatchResizeDataAction","useEffect","stateRef","useRef","current","__assign","updateResizeState","useCallback","remeasure","useResizingBehavior","initialHiddenDiv","updateHiddenDiv","hasRenderedContent","async","dataDidRender","requestAnimationFrame","containerDimension","boundingRect","getBoundingClientRect","direction","vertical","height","width","refToMeasure","measuredBoundingRect","win","debounce","leading","dataNeedsMeasuring","isInitialMeasure","useDebugWarnings","process","env","NODE_ENV","name","deprecations","styles","measuredContextValue","ResizeGroupBase","forwardRef","forwardedRef","mergedRootRef","useImperativeHandle","componentRef","onRenderData","divProps","className","ref","style","Provider","displayName"],"sources":["/home/npr/Downloads/Final FrontEnd (2)/node_modules/@fluentui/react/lib/components/src/components/ResizeGroup/ResizeGroup.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Async, divProperties, getNativeProps } from '../../Utilities';\nimport { ResizeGroupDirection } from './ResizeGroup.types';\nimport { useConst, useMergedRefs, useAsync, useOnEvent, useWarnings } from '@fluentui/react-hooks';\nimport { useWindow } from '../../WindowProvider';\nimport type { IResizeGroupProps } from './ResizeGroup.types';\n\nconst RESIZE_DELAY = 16;\n\nexport interface IResizeGroupState {\n  /**\n   * Final data used to render proper sized component\n   */\n  renderedData?: any;\n\n  /**\n   * Data to render in a hidden div for measurement\n   */\n  dataToMeasure?: any;\n\n  /**\n   * Set to true when the content container might have new dimensions and should\n   * be remeasured.\n   */\n  measureContainer?: boolean;\n\n  /**\n   * Are we resizing to accommodate having more or less available space?\n   * The 'grow' direction is when the container may have more room than the last render,\n   * such as when a window resize occurs. This means we will try to fit more content in the window.\n   * The 'shrink' direction is when the contents don't fit in the container and we need\n   * to find a transformation of the data that makes everything fit.\n   */\n  resizeDirection?: 'grow' | 'shrink';\n}\n\n/**\n * Returns a simple object is able to store measurements with a given key.\n */\nexport const getMeasurementCache = () => {\n  const measurementsCache: { [key: string]: number } = {};\n\n  return {\n    /**\n     * Checks if the provided data has a cacheKey. If it has a cacheKey and there is a\n     * corresponding entry in the measurementsCache, then it will return that value.\n     * Returns undefined otherwise.\n     */\n    getCachedMeasurement: (data: any): number | undefined => {\n      if (data && data.cacheKey && measurementsCache.hasOwnProperty(data.cacheKey)) {\n        return measurementsCache[data.cacheKey];\n      }\n\n      return undefined;\n    },\n    /**\n     * Should be called whenever there is a new measurement associated with a given data object.\n     * If the data has a cacheKey, store that measurement in the measurementsCache.\n     */\n    addMeasurementToCache: (data: any, measurement: number): void => {\n      if (data.cacheKey) {\n        measurementsCache[data.cacheKey] = measurement;\n      }\n    },\n  };\n};\n\n/**\n * Returns a function that is able to compute the next state for the ResizeGroup given the current\n * state and any measurement updates.\n */\nexport const getNextResizeGroupStateProvider = (measurementCache = getMeasurementCache()) => {\n  const _measurementCache = measurementCache;\n  let _containerDimension: number | undefined;\n\n  /**\n   * Gets the width/height of the data rendered in a hidden div.\n   * @param measuredData - The data corresponding to the measurement we wish to take.\n   * @param getElementToMeasureDimension - A function that returns the measurement of the rendered data.\n   * Only called when the measurement is not in the cache.\n   */\n  function _getMeasuredDimension(measuredData: any, getElementToMeasureDimension: () => number): number {\n    const cachedDimension = _measurementCache.getCachedMeasurement(measuredData);\n    if (cachedDimension !== undefined) {\n      return cachedDimension;\n    }\n\n    const measuredDimension = getElementToMeasureDimension();\n    _measurementCache.addMeasurementToCache(measuredData, measuredDimension);\n    return measuredDimension;\n  }\n\n  /**\n   * Will get the next IResizeGroupState based on the current data while trying to shrink contents\n   * to fit in the container.\n   * @param data - The initial data point to start measuring.\n   * @param onReduceData - Function that transforms the data into something that should render with less width/height.\n   * @param getElementToMeasureDimension - A function that returns the measurement of the rendered data.\n   * Only called when the measurement is not in the cache.\n   */\n  function _shrinkContentsUntilTheyFit(\n    data: any,\n    onReduceData: (prevData: any) => any,\n    getElementToMeasureDimension: () => number,\n  ): IResizeGroupState {\n    let dataToMeasure = data;\n    let measuredDimension: number | undefined = _getMeasuredDimension(data, getElementToMeasureDimension);\n\n    while (measuredDimension > _containerDimension!) {\n      const nextMeasuredData = onReduceData(dataToMeasure);\n\n      // We don't want to get stuck in an infinite render loop when there are no more\n      // scaling steps, so implementations of onReduceData should return undefined when\n      // there are no more scaling states to apply.\n      if (nextMeasuredData === undefined) {\n        return {\n          renderedData: dataToMeasure,\n          resizeDirection: undefined,\n          dataToMeasure: undefined,\n        };\n      }\n\n      measuredDimension = _measurementCache.getCachedMeasurement(nextMeasuredData);\n\n      // If the measurement isn't in the cache, we need to re-render with some data in a hidden div\n      if (measuredDimension === undefined) {\n        return {\n          dataToMeasure: nextMeasuredData,\n          resizeDirection: 'shrink',\n        };\n      }\n\n      dataToMeasure = nextMeasuredData;\n    }\n\n    return {\n      renderedData: dataToMeasure,\n      resizeDirection: undefined,\n      dataToMeasure: undefined,\n    };\n  }\n\n  /**\n   * This function should be called when the state changes in a manner that might allow for more content to fit\n   * on the screen, such as the window width/height growing.\n   * @param data - The initial data point to start measuring.\n   * @param onGrowData - Function that transforms the data into something that may take up more space when rendering.\n   * @param getElementToMeasureDimension - A function that returns the measurement of the rendered data.\n   * Only called when the measurement is not in the cache.\n   */\n  function _growDataUntilItDoesNotFit(\n    data: any,\n    onGrowData: (prevData: any) => any,\n    getElementToMeasureDimension: () => number,\n    onReduceData: (prevData: any) => any,\n  ): IResizeGroupState {\n    let dataToMeasure = data;\n    let measuredDimension: number | undefined = _getMeasuredDimension(data, getElementToMeasureDimension);\n\n    while (measuredDimension < _containerDimension!) {\n      const nextMeasuredData = onGrowData(dataToMeasure);\n\n      // We don't want to get stuck in an infinite render loop when there are no more\n      // scaling steps, so implementations of onGrowData should return undefined when\n      // there are no more scaling states to apply.\n      if (nextMeasuredData === undefined) {\n        return {\n          renderedData: dataToMeasure,\n          resizeDirection: undefined,\n          dataToMeasure: undefined,\n        };\n      }\n\n      measuredDimension = _measurementCache.getCachedMeasurement(nextMeasuredData);\n      // If the measurement isn't in the cache, we need to re-render with some data in a hidden div\n      if (measuredDimension === undefined) {\n        return {\n          dataToMeasure: nextMeasuredData,\n        };\n      }\n\n      dataToMeasure = nextMeasuredData;\n    }\n\n    // Once the loop is done, we should now shrink until the contents fit.\n    return {\n      resizeDirection: 'shrink',\n      ..._shrinkContentsUntilTheyFit(dataToMeasure, onReduceData, getElementToMeasureDimension),\n    };\n  }\n\n  /**\n   * Handles an update to the container width/height.\n   * Should only be called when we knew the previous container width/height.\n   * @param newDimension - The new width/height of the container.\n   * @param fullDimensionData - The initial data passed in as a prop to resizeGroup.\n   * @param renderedData - The data that was rendered prior to the container size changing.\n   * @param onGrowData - Set to true if the Resize group has an onGrowData function.\n   */\n  function _updateContainerDimension(\n    newDimension: number,\n    fullDimensionData: any,\n    renderedData: any,\n    onGrowData?: (prevData: any) => any,\n  ): IResizeGroupState {\n    let nextState: IResizeGroupState;\n    if (newDimension > _containerDimension!) {\n      if (onGrowData) {\n        nextState = {\n          resizeDirection: 'grow',\n          dataToMeasure: onGrowData(renderedData),\n        };\n      } else {\n        nextState = {\n          resizeDirection: 'shrink',\n          dataToMeasure: fullDimensionData,\n        };\n      }\n    } else {\n      nextState = {\n        resizeDirection: 'shrink',\n        dataToMeasure: renderedData,\n      };\n    }\n    _containerDimension = newDimension;\n    return { ...nextState, measureContainer: false };\n  }\n\n  function getNextState(\n    props: IResizeGroupProps,\n    currentState: IResizeGroupState,\n    getElementToMeasureDimension: () => number,\n    newContainerDimension?: number,\n  ): IResizeGroupState | undefined {\n    // If there is no new container width/height or data to measure, there is no need for a new state update\n    if (newContainerDimension === undefined && currentState.dataToMeasure === undefined) {\n      return undefined;\n    }\n\n    if (newContainerDimension) {\n      // If we know the last container size and we rendered data at that width/height, we can do an optimized render\n      if (_containerDimension && currentState.renderedData && !currentState.dataToMeasure) {\n        return {\n          ...currentState,\n          ..._updateContainerDimension(newContainerDimension, props.data, currentState.renderedData, props.onGrowData),\n        };\n      }\n\n      // If we are just setting the container width/height for the first time, we can't do any optimizations\n      _containerDimension = newContainerDimension;\n    }\n\n    let nextState: IResizeGroupState = {\n      ...currentState,\n      measureContainer: false,\n    };\n\n    if (currentState.dataToMeasure) {\n      if (currentState.resizeDirection === 'grow' && props.onGrowData) {\n        nextState = {\n          ...nextState,\n          ..._growDataUntilItDoesNotFit(\n            currentState.dataToMeasure,\n            props.onGrowData,\n            getElementToMeasureDimension,\n            props.onReduceData,\n          ),\n        };\n      } else {\n        nextState = {\n          ...nextState,\n          ..._shrinkContentsUntilTheyFit(currentState.dataToMeasure, props.onReduceData, getElementToMeasureDimension),\n        };\n      }\n    }\n\n    return nextState;\n  }\n\n  /** Function that determines if we need to render content for measurement based on the measurement cache contents. */\n  function shouldRenderDataForMeasurement(dataToMeasure: any | undefined): boolean {\n    if (!dataToMeasure || _measurementCache.getCachedMeasurement(dataToMeasure) !== undefined) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function getInitialResizeGroupState(data: any): IResizeGroupState {\n    return {\n      dataToMeasure: { ...data },\n      resizeDirection: 'grow',\n      measureContainer: true,\n    };\n  }\n\n  return {\n    getNextState,\n    shouldRenderDataForMeasurement,\n    getInitialResizeGroupState,\n  };\n};\n\n// Provides a context property that (if true) tells any child components that\n// they are only being used for measurement purposes and will not be visible.\nexport const MeasuredContext = React.createContext({ isMeasured: false });\n\n// Styles for the hidden div used for measurement\nconst hiddenDivStyles: React.CSSProperties = { position: 'fixed', visibility: 'hidden' };\nconst hiddenParentStyles: React.CSSProperties = { position: 'relative' };\nconst COMPONENT_NAME = 'ResizeGroup';\n\ntype ResizeDataAction = {\n  type: 'resizeData' | keyof IResizeGroupState;\n  value: IResizeGroupState[keyof IResizeGroupState] | IResizeGroupState;\n};\n\n/**\n * Use useReducer instead of userState because React is not batching the state updates\n * when state is set in callbacks of setTimeout or requestAnimationFrame.\n * See issue: https://github.com/facebook/react/issues/14259\n */\nfunction resizeDataReducer(state: IResizeGroupState, action: ResizeDataAction): IResizeGroupState {\n  switch (action.type) {\n    case 'resizeData':\n      return { ...action.value };\n    case 'dataToMeasure':\n      return { ...state, dataToMeasure: action.value, resizeDirection: 'grow', measureContainer: true };\n    default:\n      return { ...state, [action.type]: action.value };\n  }\n}\n\nfunction useResizeState(\n  props: IResizeGroupProps,\n  nextResizeGroupStateProvider: ReturnType<typeof getNextResizeGroupStateProvider>,\n  rootRef: React.RefObject<HTMLDivElement | null>,\n) {\n  const initialStateData = useConst(() => nextResizeGroupStateProvider.getInitialResizeGroupState(props.data));\n  const [resizeData, dispatchResizeDataAction] = React.useReducer(resizeDataReducer, initialStateData);\n\n  // Reset state when new data is provided\n  React.useEffect(() => {\n    dispatchResizeDataAction({\n      type: 'dataToMeasure',\n      value: props.data,\n    });\n  }, [props.data]);\n\n  // Because it's possible that we may force more than one re-render per animation frame, we\n  // want to make sure that the RAF request is using the most recent data.\n  const stateRef = React.useRef<IResizeGroupState>(initialStateData);\n  stateRef.current = { ...resizeData };\n\n  const updateResizeState = React.useCallback((nextState?: IResizeGroupState) => {\n    if (nextState) {\n      dispatchResizeDataAction({\n        type: 'resizeData',\n        value: nextState,\n      });\n    }\n  }, []);\n\n  const remeasure: () => void = React.useCallback(() => {\n    if (rootRef.current) {\n      dispatchResizeDataAction({\n        type: 'measureContainer',\n        value: true,\n      });\n    }\n  }, [rootRef]);\n\n  return [stateRef, updateResizeState, remeasure] as const;\n}\n\nfunction useResizingBehavior(props: IResizeGroupProps, rootRef: React.RefObject<HTMLDivElement | null>) {\n  const nextResizeGroupStateProvider = useConst(getNextResizeGroupStateProvider);\n\n  // A div that can be used for the initial measurement so that we can avoid mounting a second instance\n  // of the component being measured for the initial render.\n  const initialHiddenDiv = React.useRef<HTMLDivElement | null>(null);\n  // A hidden div that is used for mounting a new instance of the component for measurement in a hidden\n  // div without unmounting the currently visible content.\n  const updateHiddenDiv = React.useRef<HTMLDivElement | null>(null);\n\n  // Tracks if any content has been rendered to the user. This enables us to do some performance optimizations\n  // for the initial render.\n  const hasRenderedContent = React.useRef(false);\n\n  const async: Async = useAsync();\n\n  const [stateRef, updateResizeState, remeasure] = useResizeState(props, nextResizeGroupStateProvider, rootRef);\n\n  React.useEffect(() => {\n    if (stateRef.current.renderedData) {\n      hasRenderedContent.current = true;\n      props.dataDidRender?.(stateRef.current.renderedData);\n    }\n  });\n\n  React.useEffect((): void => {\n    async.requestAnimationFrame(() => {\n      let containerDimension = undefined;\n      if (stateRef.current.measureContainer && rootRef.current) {\n        const boundingRect = rootRef.current.getBoundingClientRect();\n        containerDimension =\n          props.direction === ResizeGroupDirection.vertical ? boundingRect.height : boundingRect.width;\n      }\n      const nextState = nextResizeGroupStateProvider.getNextState(\n        props,\n        stateRef.current,\n        () => {\n          const refToMeasure = !hasRenderedContent.current ? initialHiddenDiv : updateHiddenDiv;\n          if (!refToMeasure.current) {\n            return 0;\n          }\n          const measuredBoundingRect = refToMeasure.current.getBoundingClientRect();\n          return props.direction === ResizeGroupDirection.vertical\n            ? measuredBoundingRect.height\n            : measuredBoundingRect.width;\n        },\n        containerDimension,\n      );\n\n      updateResizeState(nextState);\n    }, rootRef.current);\n  });\n\n  const win = useWindow();\n  useOnEvent(win, 'resize', async.debounce(remeasure, RESIZE_DELAY, { leading: true }));\n\n  const dataNeedsMeasuring = nextResizeGroupStateProvider.shouldRenderDataForMeasurement(\n    stateRef.current.dataToMeasure,\n  );\n\n  const isInitialMeasure = !hasRenderedContent.current && dataNeedsMeasuring;\n\n  return [\n    stateRef.current.dataToMeasure,\n    stateRef.current.renderedData,\n    remeasure,\n    initialHiddenDiv,\n    updateHiddenDiv,\n    dataNeedsMeasuring,\n    isInitialMeasure,\n  ] as const;\n}\n\nfunction useDebugWarnings(props: IResizeGroupProps) {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: COMPONENT_NAME,\n      props,\n      deprecations: { styles: 'className' },\n    });\n  }\n}\n\nconst measuredContextValue = { isMeasured: true };\n\nexport const ResizeGroupBase: React.FunctionComponent<IResizeGroupProps> = React.forwardRef<\n  HTMLDivElement,\n  IResizeGroupProps\n>((props, forwardedRef) => {\n  const rootRef = React.useRef<HTMLDivElement | null>(null);\n  // The root div which is the container inside of which we are trying to fit content.\n  const mergedRootRef = useMergedRefs(rootRef, forwardedRef);\n\n  const [\n    dataToMeasure,\n    renderedData,\n    remeasure,\n    initialHiddenDiv,\n    updateHiddenDiv,\n    dataNeedsMeasuring,\n    isInitialMeasure,\n  ] = useResizingBehavior(props, rootRef);\n\n  React.useImperativeHandle(props.componentRef, () => ({ remeasure }), [remeasure]);\n\n  useDebugWarnings(props);\n\n  const { className, onRenderData } = props;\n  const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, divProperties, ['data']);\n\n  // We only ever render the final content to the user. All measurements are done in a hidden div.\n  // For the initial render, we want this to be as fast as possible, so we need to make sure that we only mount one\n  // version of the component for measurement and the final render. For renders that update what is on screen, we\n  // want to make sure that there are no jarring effects such as the screen flashing as we apply scaling steps for\n  // measurement. In the update case, we mount a second version of the component just for measurement purposes and\n  // leave the rendered content untouched until we know the next state to show to the user.\n  return (\n    <div {...divProps} className={className} ref={mergedRootRef}>\n      <div style={hiddenParentStyles}>\n        {dataNeedsMeasuring && !isInitialMeasure && (\n          <div style={hiddenDivStyles} ref={updateHiddenDiv}>\n            <MeasuredContext.Provider value={measuredContextValue}>\n              {onRenderData(dataToMeasure)}\n            </MeasuredContext.Provider>\n          </div>\n        )}\n\n        <div\n          ref={initialHiddenDiv}\n          style={isInitialMeasure ? hiddenDivStyles : undefined}\n          data-automation-id=\"visibleContent\"\n        >\n          {isInitialMeasure ? onRenderData(dataToMeasure) : renderedData && onRenderData(renderedData)}\n        </div>\n      </div>\n    </div>\n  );\n});\nResizeGroupBase.displayName = 'ResizeGroupBase';\n"]},"metadata":{},"sourceType":"module"}