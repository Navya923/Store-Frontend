{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { KeytipManager } from '../../utilities/keytips/KeytipManager';\nimport { useConst, usePrevious } from '@fluentui/react-hooks';\n\nvar registerPersistedKeytips = function (keytipsToRegister, keytipManager, registeredPersistedKeytips) {\n  for (var _i = 0, keytipsToRegister_1 = keytipsToRegister; _i < keytipsToRegister_1.length; _i++) {\n    var keytip = keytipsToRegister_1[_i];\n    var uniqueID = keytipManager.register(keytip, true); // Update map\n\n    registeredPersistedKeytips[uniqueID] = keytip;\n  }\n};\n\nvar unregisterPersistedKeytips = function (keytipManager, registeredPersistedKeytips) {\n  for (var _i = 0, _a = Object.keys(registeredPersistedKeytips); _i < _a.length; _i++) {\n    var uniqueID = _a[_i];\n    keytipManager.unregister(registeredPersistedKeytips[uniqueID], uniqueID, true);\n    delete registeredPersistedKeytips[uniqueID];\n  }\n};\n\nvar useKeytipRegistrations = function (registeredPersistedKeytips, keytipsToRegister, keytipManager) {\n  var prevPersistedKeytips = usePrevious(registeredPersistedKeytips); // Update\n\n  React.useEffect(function () {\n    if (prevPersistedKeytips) {\n      // Unregister old keytips\n      unregisterPersistedKeytips(keytipManager, prevPersistedKeytips); // Register new keytips\n\n      registerPersistedKeytips(keytipsToRegister, keytipManager, registeredPersistedKeytips);\n    }\n  }); // Mount/Unmount\n\n  React.useEffect(function () {\n    // Register on mount\n    registerPersistedKeytips(keytipsToRegister, keytipManager, registeredPersistedKeytips);\n    return function () {\n      // Unregister on unmount\n      unregisterPersistedKeytips(keytipManager, registeredPersistedKeytips);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n};\n\nexport var OverflowButton = function (props) {\n  var keytipManager = KeytipManager.getInstance();\n  var className = props.className,\n      overflowItems = props.overflowItems,\n      keytipSequences = props.keytipSequences,\n      itemSubMenuProvider = props.itemSubMenuProvider,\n      onRenderOverflowButton = props.onRenderOverflowButton;\n  var persistedKeytips = useConst({}); // Gets the subMenu for an overflow item\n\n  var getSubMenuForItem = React.useCallback(function (item) {\n    // Checks if itemSubMenuProvider has been defined, if not defaults to subMenuProps\n    if (itemSubMenuProvider) {\n      return itemSubMenuProvider(item);\n    }\n\n    if (item.subMenuProps) {\n      return item.subMenuProps.items;\n    }\n\n    return undefined;\n  }, [itemSubMenuProvider]);\n\n  var _a = React.useMemo(function () {\n    var newKeytipsToRegister = [];\n    var newOverflowItems = [];\n\n    if (keytipSequences) {\n      overflowItems === null || overflowItems === void 0 ? void 0 : overflowItems.forEach(function (overflowItem) {\n        var _a;\n\n        var keytip = overflowItem.keytipProps;\n\n        if (keytip) {\n          // Create persisted keytip\n          var persistedKeytip = {\n            content: keytip.content,\n            keySequences: keytip.keySequences,\n            disabled: keytip.disabled || !!(overflowItem.disabled || overflowItem.isDisabled),\n            hasDynamicChildren: keytip.hasDynamicChildren,\n            hasMenu: keytip.hasMenu\n          };\n\n          if (keytip.hasDynamicChildren || getSubMenuForItem(overflowItem)) {\n            // If the keytip has a submenu or children nodes, change onExecute to persistedKeytipExecute\n            persistedKeytip.onExecute = keytipManager.menuExecute.bind(keytipManager, keytipSequences, (_a = overflowItem === null || overflowItem === void 0 ? void 0 : overflowItem.keytipProps) === null || _a === void 0 ? void 0 : _a.keySequences);\n            persistedKeytip.hasOverflowSubMenu = true;\n          } else {\n            // If the keytip doesn't have a submenu, just execute the original function\n            persistedKeytip.onExecute = keytip.onExecute;\n          }\n\n          newKeytipsToRegister.push(persistedKeytip); // Add the overflow sequence to this item\n\n          var newOverflowItem = __assign(__assign({}, overflowItem), {\n            keytipProps: __assign(__assign({}, keytip), {\n              overflowSetSequence: keytipSequences\n            })\n          });\n\n          newOverflowItems === null || newOverflowItems === void 0 ? void 0 : newOverflowItems.push(newOverflowItem);\n        } else {\n          // Nothing to change, add overflowItem to list\n          newOverflowItems === null || newOverflowItems === void 0 ? void 0 : newOverflowItems.push(overflowItem);\n        }\n      });\n    } else {\n      newOverflowItems = overflowItems;\n    }\n\n    return {\n      modifiedOverflowItems: newOverflowItems,\n      keytipsToRegister: newKeytipsToRegister\n    };\n  }, [overflowItems, getSubMenuForItem, keytipManager, keytipSequences]),\n      modifiedOverflowItems = _a.modifiedOverflowItems,\n      keytipsToRegister = _a.keytipsToRegister;\n\n  useKeytipRegistrations(persistedKeytips, keytipsToRegister, keytipManager);\n  return React.createElement(\"div\", {\n    className: className\n  }, onRenderOverflowButton(modifiedOverflowItems));\n};","map":{"version":3,"mappings":"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","names":["React","KeytipManager","useConst","usePrevious","registerPersistedKeytips","keytipsToRegister","keytipManager","registeredPersistedKeytips","_i","keytip","uniqueID","register","unregisterPersistedKeytips","keys","unregister","useKeytipRegistrations","prevPersistedKeytips","useEffect","OverflowButton","props","getInstance","overflowItems","keytipSequences","itemSubMenuProvider","onRenderOverflowButton","persistedKeytips","getSubMenuForItem","useCallback","item","subMenuProps","items","undefined","useMemo","newKeytipsToRegister","newOverflowItems","forEach","overflowItem","keytipProps","persistedKeytip","content","keySequences","disabled","isDisabled","hasDynamicChildren","hasMenu","onExecute","menuExecute","bind","_a","hasOverflowSubMenu","push","newOverflowItem","overflowSetSequence","modifiedOverflowItems","className"],"sources":["/home/npr/Downloads/Final FrontEnd (2)/node_modules/@fluentui/react/lib/components/src/components/OverflowSet/OverflowButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { KeytipManager } from '../../utilities/keytips/KeytipManager';\nimport { useConst, usePrevious } from '@fluentui/react-hooks';\nimport type { IKeytipProps } from '../../Keytip';\nimport type { IOverflowSetItemProps, IOverflowSetProps } from './OverflowSet.types';\n\nconst registerPersistedKeytips = (\n  keytipsToRegister: IKeytipProps[],\n  keytipManager: KeytipManager,\n  registeredPersistedKeytips: { [uniqueID: string]: IKeytipProps },\n) => {\n  for (const keytip of keytipsToRegister) {\n    const uniqueID = keytipManager.register(keytip, true);\n    // Update map\n    registeredPersistedKeytips[uniqueID] = keytip;\n  }\n};\n\nconst unregisterPersistedKeytips = (\n  keytipManager: KeytipManager,\n  registeredPersistedKeytips: { [uniqueID: string]: IKeytipProps },\n) => {\n  for (const uniqueID of Object.keys(registeredPersistedKeytips)) {\n    keytipManager.unregister(registeredPersistedKeytips[uniqueID], uniqueID, true);\n    delete registeredPersistedKeytips[uniqueID];\n  }\n};\n\nconst useKeytipRegistrations = (\n  registeredPersistedKeytips: { [uniqueID: string]: IKeytipProps },\n  keytipsToRegister: IKeytipProps[],\n  keytipManager: KeytipManager,\n) => {\n  const prevPersistedKeytips = usePrevious(registeredPersistedKeytips);\n\n  // Update\n  React.useEffect(() => {\n    if (prevPersistedKeytips) {\n      // Unregister old keytips\n      unregisterPersistedKeytips(keytipManager, prevPersistedKeytips);\n      // Register new keytips\n      registerPersistedKeytips(keytipsToRegister, keytipManager, registeredPersistedKeytips);\n    }\n  });\n\n  // Mount/Unmount\n  React.useEffect(() => {\n    // Register on mount\n    registerPersistedKeytips(keytipsToRegister, keytipManager, registeredPersistedKeytips);\n    return () => {\n      // Unregister on unmount\n      unregisterPersistedKeytips(keytipManager, registeredPersistedKeytips);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n};\n\nexport const OverflowButton = (props: IOverflowSetProps) => {\n  const keytipManager: KeytipManager = KeytipManager.getInstance();\n  const { className, overflowItems, keytipSequences, itemSubMenuProvider, onRenderOverflowButton } = props;\n\n  const persistedKeytips = useConst<{ [uniqueID: string]: IKeytipProps }>({});\n\n  // Gets the subMenu for an overflow item\n  const getSubMenuForItem = React.useCallback(\n    (item: IOverflowSetItemProps) => {\n      // Checks if itemSubMenuProvider has been defined, if not defaults to subMenuProps\n      if (itemSubMenuProvider) {\n        return itemSubMenuProvider(item);\n      }\n      if (item.subMenuProps) {\n        return item.subMenuProps.items;\n      }\n      return undefined;\n    },\n    [itemSubMenuProvider],\n  );\n\n  const { modifiedOverflowItems, keytipsToRegister } = React.useMemo(() => {\n    const newKeytipsToRegister: IKeytipProps[] = [];\n    let newOverflowItems: IOverflowSetItemProps[] | undefined = [];\n\n    if (keytipSequences) {\n      overflowItems?.forEach(overflowItem => {\n        const keytip = (overflowItem as IOverflowSetItemProps).keytipProps;\n\n        if (keytip) {\n          // Create persisted keytip\n          const persistedKeytip: IKeytipProps = {\n            content: keytip.content,\n            keySequences: keytip.keySequences,\n            disabled: keytip.disabled || !!(overflowItem.disabled || overflowItem.isDisabled),\n            hasDynamicChildren: keytip.hasDynamicChildren,\n            hasMenu: keytip.hasMenu,\n          };\n\n          if (keytip.hasDynamicChildren || getSubMenuForItem(overflowItem)) {\n            // If the keytip has a submenu or children nodes, change onExecute to persistedKeytipExecute\n            persistedKeytip.onExecute = keytipManager.menuExecute.bind(\n              keytipManager,\n              keytipSequences,\n              overflowItem?.keytipProps?.keySequences,\n            );\n            persistedKeytip.hasOverflowSubMenu = true;\n          } else {\n            // If the keytip doesn't have a submenu, just execute the original function\n            persistedKeytip.onExecute = keytip.onExecute;\n          }\n\n          newKeytipsToRegister.push(persistedKeytip);\n\n          // Add the overflow sequence to this item\n          const newOverflowItem = {\n            ...overflowItem,\n            keytipProps: {\n              ...keytip,\n              overflowSetSequence: keytipSequences,\n            },\n          };\n          newOverflowItems?.push(newOverflowItem);\n        } else {\n          // Nothing to change, add overflowItem to list\n          newOverflowItems?.push(overflowItem);\n        }\n      });\n    } else {\n      newOverflowItems = overflowItems;\n    }\n    return { modifiedOverflowItems: newOverflowItems, keytipsToRegister: newKeytipsToRegister };\n  }, [overflowItems, getSubMenuForItem, keytipManager, keytipSequences]);\n\n  useKeytipRegistrations(persistedKeytips, keytipsToRegister, keytipManager);\n\n  return <div className={className}>{onRenderOverflowButton(modifiedOverflowItems)}</div>;\n};\n"]},"metadata":{},"sourceType":"module"}