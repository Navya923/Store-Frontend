{"ast":null,"code":"import { mergeSettings, mergeScopedSettings } from './mergeSettings';\n/**\n * Merge props and customizations giving priority to props over context.\n * NOTE: This function will always perform multiple merge operations. Use with caution.\n * @param props - New settings to merge in.\n * @param parentContext - Context containing current settings.\n * @returns Merged customizations.\n */\n\nexport function mergeCustomizations(props, parentContext) {\n  var _a = (parentContext || {}).customizations,\n      customizations = _a === void 0 ? {\n    settings: {},\n    scopedSettings: {}\n  } : _a;\n  return {\n    customizations: {\n      settings: mergeSettings(customizations.settings, props.settings),\n      scopedSettings: mergeScopedSettings(customizations.scopedSettings, props.scopedSettings),\n      inCustomizerContext: true\n    }\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,EAAwBC,mBAAxB,QAAmD,iBAAnD;AAIA;;;;;;;;AAOA,OAAM,SAAUC,mBAAV,CAA8BC,KAA9B,EAAuDC,aAAvD,EAAwF;AACpF,WAA0D,cAAa,IAAI,EAAjB,EAAmBC,cAA7E;AAAA,oBAAc,mBAAG;AAAEC,YAAQ,EAAE,EAAZ;AAAgBC,kBAAc,EAAE;AAAhC,GAAH,GAAuCC,EAArD;AAER,SAAO;AACLH,kBAAc,EAAE;AACdC,cAAQ,EAAEN,aAAa,CAACK,cAAc,CAACC,QAAhB,EAA0BH,KAAK,CAACG,QAAhC,CADT;AAEdC,oBAAc,EAAEN,mBAAmB,CAACI,cAAc,CAACE,cAAhB,EAAgCJ,KAAK,CAACI,cAAtC,CAFrB;AAGdE,yBAAmB,EAAE;AAHP;AADX,GAAP;AAOD","names":["mergeSettings","mergeScopedSettings","mergeCustomizations","props","parentContext","customizations","settings","scopedSettings","_a","inCustomizerContext"],"sources":["/home/npr/Downloads/Final FrontEnd (2)/node_modules/@fluentui/utilities/lib/src/customizations/mergeCustomizations.ts"],"sourcesContent":["import { mergeSettings, mergeScopedSettings } from './mergeSettings';\nimport type { ICustomizerProps } from './Customizer.types';\nimport type { ICustomizerContext } from './CustomizerContext';\n\n/**\n * Merge props and customizations giving priority to props over context.\n * NOTE: This function will always perform multiple merge operations. Use with caution.\n * @param props - New settings to merge in.\n * @param parentContext - Context containing current settings.\n * @returns Merged customizations.\n */\nexport function mergeCustomizations(props: ICustomizerProps, parentContext: ICustomizerContext): ICustomizerContext {\n  const { customizations = { settings: {}, scopedSettings: {} } } = parentContext || {};\n\n  return {\n    customizations: {\n      settings: mergeSettings(customizations.settings, props.settings),\n      scopedSettings: mergeScopedSettings(customizations.scopedSettings, props.scopedSettings),\n      inCustomizerContext: true,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}