{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { buttonProperties, getNativeProps, KeyCodes, mergeAriaAttributeValues, memoizeFunction, Async, EventGroup, getId } from '../../../Utilities';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\nimport { getSplitButtonVerticalDividerClassNames } from '../ContextualMenu.classNames';\nimport { KeytipData } from '../../../KeytipData';\nimport { isItemDisabled, hasSubmenu, getMenuItemAriaRole } from '../../../utilities/contextualMenu/index';\nimport { VerticalDivider } from '../../../Divider';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nvar TouchIdleDelay = 500;\n/* ms */\n\nvar ContextualMenuSplitButton =\n/** @class */\nfunction (_super) {\n  __extends(ContextualMenuSplitButton, _super);\n\n  function ContextualMenuSplitButton(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function (keytipProps) {\n      return __assign(__assign({}, keytipProps), {\n        hasMenu: true\n      });\n    });\n\n    _this._onItemKeyDown = function (ev) {\n      var _a = _this.props,\n          item = _a.item,\n          onItemKeyDown = _a.onItemKeyDown; // eslint-disable-next-line deprecation/deprecation\n\n      if (ev.which === KeyCodes.enter) {\n        _this._executeItemClick(ev);\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      } else if (onItemKeyDown) {\n        onItemKeyDown(item, ev);\n      }\n    };\n\n    _this._getSubmenuTarget = function () {\n      return _this._splitButton;\n    };\n\n    _this._renderAriaDescription = function (ariaDescription, className) {\n      // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan\n      return ariaDescription ? React.createElement(\"span\", {\n        id: _this._ariaDescriptionId,\n        className: className\n      }, ariaDescription) : null;\n    };\n\n    _this._onItemMouseEnterPrimary = function (ev) {\n      var _a = _this.props,\n          item = _a.item,\n          onItemMouseEnter = _a.onItemMouseEnter;\n\n      if (onItemMouseEnter) {\n        onItemMouseEnter(__assign(__assign({}, item), {\n          subMenuProps: undefined,\n          items: undefined\n        }), ev, _this._splitButton);\n      }\n    };\n\n    _this._onItemMouseEnterIcon = function (ev) {\n      var _a = _this.props,\n          item = _a.item,\n          onItemMouseEnter = _a.onItemMouseEnter;\n\n      if (onItemMouseEnter) {\n        onItemMouseEnter(item, ev, _this._splitButton);\n      }\n    };\n\n    _this._onItemMouseMovePrimary = function (ev) {\n      var _a = _this.props,\n          item = _a.item,\n          onItemMouseMove = _a.onItemMouseMove;\n\n      if (onItemMouseMove) {\n        onItemMouseMove(__assign(__assign({}, item), {\n          subMenuProps: undefined,\n          items: undefined\n        }), ev, _this._splitButton);\n      }\n    };\n\n    _this._onItemMouseMoveIcon = function (ev) {\n      var _a = _this.props,\n          item = _a.item,\n          onItemMouseMove = _a.onItemMouseMove;\n\n      if (onItemMouseMove) {\n        onItemMouseMove(item, ev, _this._splitButton);\n      }\n    };\n\n    _this._onIconItemClick = function (ev) {\n      var _a = _this.props,\n          item = _a.item,\n          onItemClickBase = _a.onItemClickBase;\n\n      if (onItemClickBase) {\n        onItemClickBase(item, ev, _this._splitButton ? _this._splitButton : ev.currentTarget);\n      }\n    };\n\n    _this._executeItemClick = function (ev) {\n      var _a = _this.props,\n          item = _a.item,\n          executeItemClick = _a.executeItemClick,\n          onItemClick = _a.onItemClick;\n\n      if (item.disabled || item.isDisabled) {\n        return;\n      }\n\n      if (_this._processingTouch && onItemClick) {\n        return onItemClick(item, ev);\n      }\n\n      if (executeItemClick) {\n        executeItemClick(item, ev);\n      }\n    };\n\n    _this._onTouchStart = function (ev) {\n      if (_this._splitButton && !('onpointerdown' in _this._splitButton)) {\n        _this._handleTouchAndPointerEvent(ev);\n      }\n    };\n\n    _this._onPointerDown = function (ev) {\n      if (ev.pointerType === 'touch') {\n        _this._handleTouchAndPointerEvent(ev);\n\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n      }\n    };\n\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    return _this;\n  }\n\n  ContextualMenuSplitButton.prototype.componentDidMount = function () {\n    if (this._splitButton && 'onpointerdown' in this._splitButton) {\n      this._events.on(this._splitButton, 'pointerdown', this._onPointerDown, true);\n    }\n  };\n\n  ContextualMenuSplitButton.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n\n    this._events.dispose();\n  };\n\n  ContextualMenuSplitButton.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        item = _a.item,\n        classNames = _a.classNames,\n        index = _a.index,\n        focusableElementIndex = _a.focusableElementIndex,\n        totalItemCount = _a.totalItemCount,\n        hasCheckmarks = _a.hasCheckmarks,\n        hasIcons = _a.hasIcons,\n        onItemMouseLeave = _a.onItemMouseLeave,\n        expandedMenuItemKey = _a.expandedMenuItemKey;\n    var itemHasSubmenu = hasSubmenu(item);\n    var keytipProps = item.keytipProps;\n\n    if (keytipProps) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    } // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with\n    // the description in it to be added to ariaDescribedBy\n\n\n    var ariaDescription = item.ariaDescription;\n\n    if (ariaDescription) {\n      this._ariaDescriptionId = getId();\n    }\n\n    return React.createElement(KeytipData, {\n      keytipProps: keytipProps,\n      disabled: isItemDisabled(item)\n    }, function (keytipAttributes) {\n      return React.createElement(\"div\", {\n        \"data-ktp-target\": keytipAttributes['data-ktp-target'],\n        ref: function (splitButton) {\n          return _this._splitButton = splitButton;\n        },\n        role: getMenuItemAriaRole(item),\n        \"aria-label\": item.ariaLabel,\n        className: classNames.splitContainer,\n        \"aria-disabled\": isItemDisabled(item),\n        \"aria-expanded\": itemHasSubmenu ? item.key === expandedMenuItemKey : undefined,\n        \"aria-haspopup\": true,\n        \"aria-describedby\": mergeAriaAttributeValues(item.ariaDescribedBy, ariaDescription ? _this._ariaDescriptionId : undefined, keytipAttributes['aria-describedby']),\n        \"aria-checked\": item.isChecked || item.checked,\n        \"aria-posinset\": focusableElementIndex + 1,\n        \"aria-setsize\": totalItemCount,\n        onMouseEnter: _this._onItemMouseEnterPrimary,\n        onMouseLeave: onItemMouseLeave ? onItemMouseLeave.bind(_this, __assign(__assign({}, item), {\n          subMenuProps: null,\n          items: null\n        })) : undefined,\n        onMouseMove: _this._onItemMouseMovePrimary,\n        onKeyDown: _this._onItemKeyDown,\n        onClick: _this._executeItemClick,\n        onTouchStart: _this._onTouchStart,\n        tabIndex: 0,\n        \"data-is-focusable\": true,\n        \"aria-roledescription\": item['aria-roledescription']\n      }, _this._renderSplitPrimaryButton(item, classNames, index, hasCheckmarks, hasIcons), _this._renderSplitDivider(item), _this._renderSplitIconButton(item, classNames, index, keytipAttributes), _this._renderAriaDescription(ariaDescription, classNames.screenReaderText));\n    });\n  };\n\n  ContextualMenuSplitButton.prototype._renderSplitPrimaryButton = function (item, // eslint-disable-next-line deprecation/deprecation\n  classNames, index, hasCheckmarks, hasIcons) {\n    var _a = this.props,\n        _b = _a.contextualMenuItemAs,\n        ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b,\n        onItemClick = _a.onItemClick;\n    var itemProps = {\n      key: item.key,\n      disabled: isItemDisabled(item) || item.primaryDisabled,\n\n      /* eslint-disable deprecation/deprecation */\n      name: item.name,\n      text: item.text || item.name,\n      secondaryText: item.secondaryText,\n\n      /* eslint-enable deprecation/deprecation */\n      className: classNames.splitPrimary,\n      canCheck: item.canCheck,\n      isChecked: item.isChecked,\n      checked: item.checked,\n      iconProps: item.iconProps,\n      onRenderIcon: item.onRenderIcon,\n      data: item.data,\n      'data-is-focusable': false\n    };\n    var itemComponentProps = item.itemProps;\n    return React.createElement(\"button\", __assign({}, getNativeProps(itemProps, buttonProperties)), React.createElement(ChildrenRenderer, __assign({\n      \"data-is-focusable\": false,\n      item: itemProps,\n      classNames: classNames,\n      index: index,\n      onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : undefined,\n      hasIcons: hasIcons\n    }, itemComponentProps)));\n  };\n\n  ContextualMenuSplitButton.prototype._renderSplitDivider = function (item) {\n    var getDividerClassNames = item.getSplitButtonVerticalDividerClassNames || getSplitButtonVerticalDividerClassNames;\n    return React.createElement(VerticalDivider, {\n      getClassNames: getDividerClassNames\n    });\n  };\n\n  ContextualMenuSplitButton.prototype._renderSplitIconButton = function (item, classNames, // eslint-disable-line deprecation/deprecation\n  index, keytipAttributes) {\n    var _a = this.props,\n        _b = _a.contextualMenuItemAs,\n        ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b,\n        onItemMouseLeave = _a.onItemMouseLeave,\n        onItemMouseDown = _a.onItemMouseDown,\n        openSubMenu = _a.openSubMenu,\n        dismissSubMenu = _a.dismissSubMenu,\n        dismissMenu = _a.dismissMenu;\n    var itemProps = {\n      onClick: this._onIconItemClick,\n      disabled: isItemDisabled(item),\n      className: classNames.splitMenu,\n      subMenuProps: item.subMenuProps,\n      submenuIconProps: item.submenuIconProps,\n      split: true,\n      key: item.key\n    };\n\n    var buttonProps = __assign(__assign({}, getNativeProps(itemProps, buttonProperties)), {\n      onMouseEnter: this._onItemMouseEnterIcon,\n      onMouseLeave: onItemMouseLeave ? onItemMouseLeave.bind(this, item) : undefined,\n      onMouseDown: function (ev) {\n        return onItemMouseDown ? onItemMouseDown(item, ev) : undefined;\n      },\n      onMouseMove: this._onItemMouseMoveIcon,\n      'data-is-focusable': false,\n      'data-ktp-execute-target': keytipAttributes['data-ktp-execute-target'],\n      'aria-hidden': true\n    });\n\n    var itemComponentProps = item.itemProps;\n    return React.createElement(\"button\", __assign({}, buttonProps), React.createElement(ChildrenRenderer, __assign({\n      componentRef: item.componentRef,\n      item: itemProps,\n      classNames: classNames,\n      index: index,\n      hasIcons: false,\n      openSubMenu: openSubMenu,\n      dismissSubMenu: dismissSubMenu,\n      dismissMenu: dismissMenu,\n      getSubmenuTarget: this._getSubmenuTarget\n    }, itemComponentProps)));\n  };\n\n  ContextualMenuSplitButton.prototype._handleTouchAndPointerEvent = function (ev) {\n    var _this = this;\n\n    var onTap = this.props.onTap;\n\n    if (onTap) {\n      onTap(ev);\n    } // If we already have an existing timeout from a previous touch/pointer event\n    // cancel that timeout so we can set a new one.\n\n\n    if (this._lastTouchTimeoutId) {\n      this._async.clearTimeout(this._lastTouchTimeoutId);\n\n      this._lastTouchTimeoutId = undefined;\n    }\n\n    this._processingTouch = true;\n    this._lastTouchTimeoutId = this._async.setTimeout(function () {\n      _this._processingTouch = false;\n      _this._lastTouchTimeoutId = undefined;\n    }, TouchIdleDelay);\n  };\n\n  return ContextualMenuSplitButton;\n}(ContextualMenuItemWrapper);\n\nexport { ContextualMenuSplitButton };","map":{"version":3,"mappings":"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","names":["React","buttonProperties","getNativeProps","KeyCodes","mergeAriaAttributeValues","memoizeFunction","Async","EventGroup","getId","ContextualMenuItem","getSplitButtonVerticalDividerClassNames","KeytipData","isItemDisabled","hasSubmenu","getMenuItemAriaRole","VerticalDivider","ContextualMenuItemWrapper","TouchIdleDelay","__extends","props","_super","_this","keytipProps","hasMenu","ev","item","onItemKeyDown","which","enter","_executeItemClick","preventDefault","stopPropagation","_splitButton","ariaDescription","className","id","_ariaDescriptionId","onItemMouseEnter","subMenuProps","undefined","items","onItemMouseMove","onItemClickBase","currentTarget","executeItemClick","onItemClick","disabled","isDisabled","_processingTouch","_handleTouchAndPointerEvent","pointerType","stopImmediatePropagation","_async","_events","ContextualMenuSplitButton","on","_onPointerDown","dispose","classNames","index","focusableElementIndex","totalItemCount","hasCheckmarks","hasIcons","onItemMouseLeave","expandedMenuItemKey","itemHasSubmenu","_getMemoizedMenuButtonKeytipProps","keytipAttributes","ref","splitButton","role","ariaLabel","splitContainer","key","ariaDescribedBy","isChecked","checked","onMouseEnter","_onItemMouseEnterPrimary","onMouseLeave","bind","__assign","onMouseMove","_onItemMouseMovePrimary","onKeyDown","_onItemKeyDown","onClick","onTouchStart","_onTouchStart","tabIndex","_renderSplitPrimaryButton","_renderSplitDivider","_renderSplitIconButton","_renderAriaDescription","screenReaderText","_b","ChildrenRenderer","itemProps","primaryDisabled","name","text","secondaryText","splitPrimary","canCheck","iconProps","onRenderIcon","data","itemComponentProps","onCheckmarkClick","getDividerClassNames","getClassNames","onItemMouseDown","openSubMenu","dismissSubMenu","dismissMenu","_onIconItemClick","splitMenu","submenuIconProps","split","buttonProps","_onItemMouseEnterIcon","onMouseDown","_onItemMouseMoveIcon","componentRef","getSubmenuTarget","_getSubmenuTarget","onTap","_lastTouchTimeoutId","clearTimeout","setTimeout"],"sources":["/home/npr/Downloads/Final FrontEnd (2)/node_modules/@fluentui/react/lib/components/ContextualMenu/src/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuSplitButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  buttonProperties,\n  getNativeProps,\n  KeyCodes,\n  mergeAriaAttributeValues,\n  memoizeFunction,\n  Async,\n  EventGroup,\n  getId,\n} from '../../../Utilities';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\nimport { getSplitButtonVerticalDividerClassNames } from '../ContextualMenu.classNames';\nimport { KeytipData } from '../../../KeytipData';\nimport { isItemDisabled, hasSubmenu, getMenuItemAriaRole } from '../../../utilities/contextualMenu/index';\nimport { VerticalDivider } from '../../../Divider';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nimport type { IContextualMenuItem } from '../ContextualMenu.types';\nimport type { IMenuItemClassNames } from '../ContextualMenu.classNames';\nimport type { IKeytipProps } from '../../../Keytip';\nimport type { IContextualMenuItemWrapperProps } from './ContextualMenuItemWrapper.types';\n\nexport interface IContextualMenuSplitButtonState {}\n\nconst TouchIdleDelay = 500; /* ms */\n\nexport class ContextualMenuSplitButton extends ContextualMenuItemWrapper {\n  private _splitButton: HTMLDivElement;\n  private _lastTouchTimeoutId: number | undefined;\n  private _processingTouch: boolean;\n  private _ariaDescriptionId: string;\n\n  private _async: Async;\n  private _events: EventGroup;\n\n  private _getMemoizedMenuButtonKeytipProps = memoizeFunction((keytipProps: IKeytipProps) => {\n    return {\n      ...keytipProps,\n      hasMenu: true,\n    };\n  });\n\n  constructor(props: IContextualMenuItemWrapperProps) {\n    super(props);\n\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n  }\n\n  public componentDidMount() {\n    if (this._splitButton && 'onpointerdown' in this._splitButton) {\n      this._events.on(this._splitButton, 'pointerdown', this._onPointerDown, true);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      item,\n      classNames,\n      index,\n      focusableElementIndex,\n      totalItemCount,\n      hasCheckmarks,\n      hasIcons,\n      onItemMouseLeave,\n      expandedMenuItemKey,\n    } = this.props;\n\n    const itemHasSubmenu = hasSubmenu(item);\n\n    let { keytipProps } = item;\n    if (keytipProps) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n\n    // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with\n    // the description in it to be added to ariaDescribedBy\n    const { ariaDescription } = item;\n    if (ariaDescription) {\n      this._ariaDescriptionId = getId();\n    }\n\n    return (\n      <KeytipData keytipProps={keytipProps} disabled={isItemDisabled(item)}>\n        {(keytipAttributes: any): JSX.Element => (\n          <div\n            data-ktp-target={keytipAttributes['data-ktp-target']}\n            ref={(splitButton: HTMLDivElement) => (this._splitButton = splitButton)}\n            role={getMenuItemAriaRole(item)}\n            aria-label={item.ariaLabel}\n            className={classNames.splitContainer}\n            aria-disabled={isItemDisabled(item)}\n            aria-expanded={itemHasSubmenu ? item.key === expandedMenuItemKey : undefined}\n            aria-haspopup={true}\n            aria-describedby={mergeAriaAttributeValues(\n              item.ariaDescribedBy,\n              ariaDescription ? this._ariaDescriptionId : undefined,\n              keytipAttributes['aria-describedby'],\n            )}\n            aria-checked={item.isChecked || item.checked}\n            aria-posinset={focusableElementIndex + 1}\n            aria-setsize={totalItemCount}\n            onMouseEnter={this._onItemMouseEnterPrimary}\n            onMouseLeave={\n              onItemMouseLeave ? onItemMouseLeave.bind(this, { ...item, subMenuProps: null, items: null }) : undefined\n            }\n            onMouseMove={this._onItemMouseMovePrimary}\n            onKeyDown={this._onItemKeyDown}\n            onClick={this._executeItemClick}\n            onTouchStart={this._onTouchStart}\n            tabIndex={0}\n            data-is-focusable={true}\n            aria-roledescription={item['aria-roledescription']}\n          >\n            {this._renderSplitPrimaryButton(item, classNames, index, hasCheckmarks!, hasIcons!)}\n            {this._renderSplitDivider(item)}\n            {this._renderSplitIconButton(item, classNames, index, keytipAttributes)}\n            {this._renderAriaDescription(ariaDescription, classNames.screenReaderText)}\n          </div>\n        )}\n      </KeytipData>\n    );\n  }\n\n  protected _onItemKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    const { item, onItemKeyDown } = this.props;\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which === KeyCodes.enter) {\n      this._executeItemClick(ev);\n      ev.preventDefault();\n      ev.stopPropagation();\n    } else if (onItemKeyDown) {\n      onItemKeyDown(item, ev);\n    }\n  };\n\n  protected _getSubmenuTarget = (): HTMLElement | undefined => {\n    return this._splitButton;\n  };\n\n  protected _renderAriaDescription = (ariaDescription?: string, className?: string) => {\n    // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan\n    return ariaDescription ? (\n      <span id={this._ariaDescriptionId} className={className}>\n        {ariaDescription}\n      </span>\n    ) : null;\n  };\n\n  private _renderSplitPrimaryButton(\n    item: IContextualMenuItem,\n    // eslint-disable-next-line deprecation/deprecation\n    classNames: IMenuItemClassNames,\n    index: number,\n    hasCheckmarks: boolean,\n    hasIcons: boolean,\n  ) {\n    const { contextualMenuItemAs: ChildrenRenderer = ContextualMenuItem, onItemClick } = this.props;\n\n    const itemProps: IContextualMenuItem = {\n      key: item.key,\n      disabled: isItemDisabled(item) || item.primaryDisabled,\n      /* eslint-disable deprecation/deprecation */\n      name: item.name,\n      text: item.text || item.name,\n      secondaryText: item.secondaryText,\n      /* eslint-enable deprecation/deprecation */\n      className: classNames.splitPrimary,\n      canCheck: item.canCheck,\n      isChecked: item.isChecked,\n      checked: item.checked,\n      iconProps: item.iconProps,\n      onRenderIcon: item.onRenderIcon,\n      data: item.data,\n      'data-is-focusable': false,\n    };\n\n    const { itemProps: itemComponentProps } = item;\n\n    return (\n      <button {...getNativeProps(itemProps, buttonProperties)}>\n        <ChildrenRenderer\n          data-is-focusable={false}\n          item={itemProps}\n          classNames={classNames}\n          index={index}\n          onCheckmarkClick={hasCheckmarks && onItemClick ? onItemClick : undefined}\n          hasIcons={hasIcons}\n          {...itemComponentProps}\n        />\n      </button>\n    );\n  }\n\n  private _renderSplitDivider(item: IContextualMenuItem) {\n    const getDividerClassNames =\n      item.getSplitButtonVerticalDividerClassNames || getSplitButtonVerticalDividerClassNames;\n    return <VerticalDivider getClassNames={getDividerClassNames} />;\n  }\n\n  private _renderSplitIconButton(\n    item: IContextualMenuItem,\n    classNames: IMenuItemClassNames, // eslint-disable-line deprecation/deprecation\n    index: number,\n    keytipAttributes: any,\n  ) {\n    const {\n      contextualMenuItemAs: ChildrenRenderer = ContextualMenuItem,\n      onItemMouseLeave,\n      onItemMouseDown,\n      openSubMenu,\n      dismissSubMenu,\n      dismissMenu,\n    } = this.props;\n\n    const itemProps: IContextualMenuItem = {\n      onClick: this._onIconItemClick,\n      disabled: isItemDisabled(item),\n      className: classNames.splitMenu,\n      subMenuProps: item.subMenuProps,\n      submenuIconProps: item.submenuIconProps,\n      split: true,\n      key: item.key,\n    };\n\n    const buttonProps = {\n      ...getNativeProps<React.ButtonHTMLAttributes<HTMLButtonElement>>(itemProps, buttonProperties),\n      ...{\n        onMouseEnter: this._onItemMouseEnterIcon,\n        onMouseLeave: onItemMouseLeave ? onItemMouseLeave.bind(this, item) : undefined,\n        onMouseDown: (ev: React.MouseEvent<HTMLButtonElement>) =>\n          onItemMouseDown ? onItemMouseDown(item, ev) : undefined,\n        onMouseMove: this._onItemMouseMoveIcon,\n        'data-is-focusable': false,\n        'data-ktp-execute-target': keytipAttributes['data-ktp-execute-target'],\n        'aria-hidden': true,\n      },\n    };\n\n    const { itemProps: itemComponentProps } = item;\n\n    return (\n      <button {...buttonProps}>\n        <ChildrenRenderer\n          componentRef={item.componentRef}\n          item={itemProps}\n          classNames={classNames}\n          index={index}\n          hasIcons={false}\n          openSubMenu={openSubMenu}\n          dismissSubMenu={dismissSubMenu}\n          dismissMenu={dismissMenu}\n          getSubmenuTarget={this._getSubmenuTarget}\n          {...itemComponentProps}\n        />\n      </button>\n    );\n  }\n\n  private _onItemMouseEnterPrimary = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemMouseEnter } = this.props;\n    if (onItemMouseEnter) {\n      onItemMouseEnter({ ...item, subMenuProps: undefined, items: undefined }, ev, this._splitButton);\n    }\n  };\n\n  private _onItemMouseEnterIcon = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemMouseEnter } = this.props;\n    if (onItemMouseEnter) {\n      onItemMouseEnter(item, ev, this._splitButton);\n    }\n  };\n\n  private _onItemMouseMovePrimary = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemMouseMove } = this.props;\n    if (onItemMouseMove) {\n      onItemMouseMove({ ...item, subMenuProps: undefined, items: undefined }, ev, this._splitButton);\n    }\n  };\n\n  private _onItemMouseMoveIcon = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemMouseMove } = this.props;\n    if (onItemMouseMove) {\n      onItemMouseMove(item, ev, this._splitButton);\n    }\n  };\n\n  private _onIconItemClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemClickBase } = this.props;\n    if (onItemClickBase) {\n      onItemClickBase(item, ev, (this._splitButton ? this._splitButton : ev.currentTarget) as HTMLElement);\n    }\n  };\n\n  private _executeItemClick = (ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>): void => {\n    const { item, executeItemClick, onItemClick } = this.props;\n\n    if (item.disabled || item.isDisabled) {\n      return;\n    }\n\n    if (this._processingTouch && onItemClick) {\n      return onItemClick(item, ev);\n    }\n\n    if (executeItemClick) {\n      executeItemClick(item, ev);\n    }\n  };\n\n  private _onTouchStart = (ev: React.TouchEvent<HTMLElement>): void => {\n    if (this._splitButton && !('onpointerdown' in this._splitButton)) {\n      this._handleTouchAndPointerEvent(ev);\n    }\n  };\n\n  private _onPointerDown = (ev: PointerEvent): void => {\n    if (ev.pointerType === 'touch') {\n      this._handleTouchAndPointerEvent(ev);\n      ev.preventDefault();\n      ev.stopImmediatePropagation();\n    }\n  };\n\n  private _handleTouchAndPointerEvent(ev: React.TouchEvent<HTMLElement> | PointerEvent) {\n    const { onTap } = this.props;\n\n    if (onTap) {\n      onTap(ev);\n    }\n    // If we already have an existing timeout from a previous touch/pointer event\n    // cancel that timeout so we can set a new one.\n    if (this._lastTouchTimeoutId) {\n      this._async.clearTimeout(this._lastTouchTimeoutId);\n      this._lastTouchTimeoutId = undefined;\n    }\n    this._processingTouch = true;\n    this._lastTouchTimeoutId = this._async.setTimeout(() => {\n      this._processingTouch = false;\n      this._lastTouchTimeoutId = undefined;\n    }, TouchIdleDelay);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}