{"ast":null,"code":"import * as React from 'react';\n/**\n * @deprecated Deprecated due to potential for misuse. Generally, use `React.useCallback` instead.\n *\n * This hook was intended for creating callbacks which have no dependencies, and therefore never\n * need to change. It works fine if everyone using it is extremely mindful of how closures work,\n * but that's not a safe assumption--so in practice, usage of this hook tends to result in bugs\n * like unintentionally capturing the first value of a prop and not respecting updates (when\n * updates should be respected).\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nexport function useConstCallback(callback) {\n  var ref = React.useRef();\n\n  if (!ref.current) {\n    ref.current = callback;\n  }\n\n  return ref.current;\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA;;;;;;;;;AASA;;AACA,OAAM,SAAUC,gBAAV,CAA8DC,QAA9D,EAAyE;AAC7E,MAAMC,GAAG,GAAGH,KAAK,CAACI,MAAN,EAAZ;;AACA,MAAI,CAACD,GAAG,CAACE,OAAT,EAAkB;AAChBF,OAAG,CAACE,OAAJ,GAAcH,QAAd;AACD;;AACD,SAAOC,GAAG,CAACE,OAAX;AACD","names":["React","useConstCallback","callback","ref","useRef","current"],"sources":["/home/npr/Downloads/Final FrontEnd (2)/node_modules/@fluentui/react-hooks/src/useConstCallback.ts"],"sourcesContent":["import * as React from 'react';\n\n/**\n * @deprecated Deprecated due to potential for misuse. Generally, use `React.useCallback` instead.\n *\n * This hook was intended for creating callbacks which have no dependencies, and therefore never\n * need to change. It works fine if everyone using it is extremely mindful of how closures work,\n * but that's not a safe assumption--so in practice, usage of this hook tends to result in bugs\n * like unintentionally capturing the first value of a prop and not respecting updates (when\n * updates should be respected).\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useConstCallback<T extends (...args: any[]) => any>(callback: T): T {\n  const ref = React.useRef<T>();\n  if (!ref.current) {\n    ref.current = callback;\n  }\n  return ref.current;\n}\n"]},"metadata":{},"sourceType":"module"}