{"ast":null,"code":"import { HighContrastSelector } from './CommonStyles';\nimport { IsFocusVisibleClassName } from '@fluentui/utilities';\nimport { ZIndexes } from './zIndexes';\nexport function getFocusStyle(theme, insetOrOptions, position, highContrastStyle, borderColor, outlineColor, isFocusedOnly) {\n  if (typeof insetOrOptions === 'number' || !insetOrOptions) {\n    return _getFocusStyleInternal(theme, {\n      inset: insetOrOptions,\n      position: position,\n      highContrastStyle: highContrastStyle,\n      borderColor: borderColor,\n      outlineColor: outlineColor,\n      isFocusedOnly: isFocusedOnly\n    });\n  } else {\n    return _getFocusStyleInternal(theme, insetOrOptions);\n  }\n}\n\nfunction _getFocusStyleInternal(theme, options) {\n  var _a, _b;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _c = options.inset,\n      inset = _c === void 0 ? 0 : _c,\n      _d = options.width,\n      width = _d === void 0 ? 1 : _d,\n      _e = options.position,\n      position = _e === void 0 ? 'relative' : _e,\n      highContrastStyle = options.highContrastStyle,\n      _f = options.borderColor,\n      borderColor = _f === void 0 ? theme.palette.white : _f,\n      _g = options.outlineColor,\n      outlineColor = _g === void 0 ? theme.palette.neutralSecondary : _g,\n      _h = options.isFocusedOnly,\n      isFocusedOnly = _h === void 0 ? true : _h;\n  return {\n    // Clear browser-specific focus styles and use 'transparent' as placeholder for focus style.\n    outline: 'transparent',\n    // Requirement because pseudo-element is absolutely positioned.\n    position: position,\n    selectors: (_a = {\n      // Clear the focus border in Firefox.\n      // Reference: http://stackoverflow.com/a/199319/1436671\n      '::-moz-focus-inner': {\n        border: '0'\n      }\n    }, // When the element that uses this mixin is in a :focus state, add a pseudo-element to\n    // create a border.\n    _a[\".\" + IsFocusVisibleClassName + \" &\" + (isFocusedOnly ? ':focus' : '') + \":after\"] = {\n      content: '\"\"',\n      position: 'absolute',\n      left: inset + 1,\n      top: inset + 1,\n      bottom: inset + 1,\n      right: inset + 1,\n      border: width + \"px solid \" + borderColor,\n      outline: width + \"px solid \" + outlineColor,\n      zIndex: ZIndexes.FocusStyle,\n      selectors: (_b = {}, _b[HighContrastSelector] = highContrastStyle, _b)\n    }, _a)\n  };\n}\n/**\n * Generates style to clear browser specific focus styles.\n */\n\n\nexport function focusClear() {\n  return {\n    selectors: {\n      '&::-moz-focus-inner': {\n        // Clear the focus border in Firefox. Reference: http://stackoverflow.com/a/199319/1436671\n        border: 0\n      },\n      '&': {\n        // Clear browser specific focus styles and use transparent as placeholder for focus style\n        outline: 'transparent'\n      }\n    }\n  };\n}\n/**\n * Generates a style which can be used to set a border on focus.\n *\n * @param theme - The theme object to use.\n * @param inset - The number of pixels to inset the border (default 0)\n * @param width - The border width in pixels (default 1)\n * @param color - Color of the outline (default `theme.palette.neutralSecondary`)\n * @returns The style object.\n */\n\nexport function getFocusOutlineStyle(theme, inset, width, color) {\n  var _a;\n\n  if (inset === void 0) {\n    inset = 0;\n  }\n\n  if (width === void 0) {\n    width = 1;\n  }\n\n  return {\n    selectors: (_a = {}, _a[\":global(\" + IsFocusVisibleClassName + \") &:focus\"] = {\n      outline: width + \" solid \" + (color || theme.palette.neutralSecondary),\n      outlineOffset: -inset + \"px\"\n    }, _a)\n  };\n}\n/**\n * Generates text input border styles on focus.\n *\n * @param borderColor - Color of the border.\n * @param borderRadius - Radius of the border.\n * @param borderType - Type of the border.\n * @param borderPosition - Position of the border relative to the input element (default to -1\n * as it's the most common border width of the input element)\n * @returns The style object.\n */\n\nexport var getInputFocusStyle = function (borderColor, borderRadius, borderType, borderPosition) {\n  var _a, _b, _c;\n\n  if (borderType === void 0) {\n    borderType = 'border';\n  }\n\n  if (borderPosition === void 0) {\n    borderPosition = -1;\n  }\n\n  var isBorderBottom = borderType === 'borderBottom';\n  return {\n    borderColor: borderColor,\n    selectors: {\n      ':after': (_a = {\n        pointerEvents: 'none',\n        content: \"''\",\n        position: 'absolute',\n        left: isBorderBottom ? 0 : borderPosition,\n        top: borderPosition,\n        bottom: borderPosition,\n        right: isBorderBottom ? 0 : borderPosition\n      }, _a[borderType] = \"2px solid \" + borderColor, _a.borderRadius = borderRadius, _a.width = borderType === 'borderBottom' ? '100%' : undefined, _a.selectors = (_b = {}, _b[HighContrastSelector] = (_c = {}, _c[borderType === 'border' ? 'borderColor' : 'borderBottomColor'] = 'Highlight', _c), _b), _a)\n    }\n  };\n};","map":{"version":3,"mappings":"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","names":["HighContrastSelector","IsFocusVisibleClassName","ZIndexes","getFocusStyle","theme","insetOrOptions","position","highContrastStyle","borderColor","outlineColor","isFocusedOnly","_getFocusStyleInternal","inset","options","_c","_d","width","_e","_f","palette","white","_g","neutralSecondary","_h","outline","selectors","border","_a","content","left","top","bottom","right","zIndex","FocusStyle","_b","focusClear","getFocusOutlineStyle","color","outlineOffset","getInputFocusStyle","borderRadius","borderType","borderPosition","isBorderBottom","pointerEvents","undefined"],"sources":["/home/npr/Downloads/Final FrontEnd (2)/node_modules/@fluentui/style-utilities/lib/src/styles/getFocusStyle.ts"],"sourcesContent":["import { HighContrastSelector } from './CommonStyles';\nimport { IsFocusVisibleClassName } from '@fluentui/utilities';\nimport { ZIndexes } from './zIndexes';\nimport type { IRawStyle } from '@fluentui/merge-styles';\nimport type { IGetFocusStylesOptions, ITheme } from '../interfaces/index';\n\n/**\n * Generates a focus style which can be used to define an :after focus border.\n *\n * @param theme - The theme object to use.\n * @param options - Options to customize the focus border.\n * @returns The style object.\n */\nexport function getFocusStyle(theme: ITheme, options?: IGetFocusStylesOptions): IRawStyle;\n/**\n * Generates a focus style which can be used to define an :after focus border.\n *\n * @param theme - The theme object to use.\n * @param inset - The number of pixels to inset the border.\n * @param position - The positioning applied to the container. Must\n * be 'relative' or 'absolute' so that the focus border can live around it.\n * @param highContrastStyle - Style for high contrast mode.\n * @param borderColor - Color of the border.\n * @param outlineColor - Color of the outline.\n * @param isFocusedOnly - If the styles should apply on focus or not.\n * @returns The style object.\n * @deprecated Use the object parameter version instead.\n */\nexport function getFocusStyle(\n  theme: ITheme,\n  inset?: number,\n  position?: 'relative' | 'absolute',\n  highContrastStyle?: IRawStyle | undefined,\n  borderColor?: string,\n  outlineColor?: string,\n  isFocusedOnly?: boolean,\n): IRawStyle;\nexport function getFocusStyle(\n  theme: ITheme,\n  insetOrOptions?: number | IGetFocusStylesOptions,\n  position?: 'relative' | 'absolute',\n  highContrastStyle?: IRawStyle,\n  borderColor?: string,\n  outlineColor?: string,\n  isFocusedOnly?: boolean,\n): IRawStyle {\n  if (typeof insetOrOptions === 'number' || !insetOrOptions) {\n    return _getFocusStyleInternal(theme, {\n      inset: insetOrOptions,\n      position,\n      highContrastStyle,\n      borderColor,\n      outlineColor,\n      isFocusedOnly,\n    });\n  } else {\n    return _getFocusStyleInternal(theme, insetOrOptions);\n  }\n}\n\nfunction _getFocusStyleInternal(theme: ITheme, options: IGetFocusStylesOptions = {}): IRawStyle {\n  const {\n    inset = 0,\n    width = 1,\n    position = 'relative',\n    highContrastStyle,\n    borderColor = theme.palette.white,\n    outlineColor = theme.palette.neutralSecondary,\n    isFocusedOnly = true,\n  } = options;\n\n  return {\n    // Clear browser-specific focus styles and use 'transparent' as placeholder for focus style.\n    outline: 'transparent',\n    // Requirement because pseudo-element is absolutely positioned.\n    position,\n\n    selectors: {\n      // Clear the focus border in Firefox.\n      // Reference: http://stackoverflow.com/a/199319/1436671\n      '::-moz-focus-inner': {\n        border: '0',\n      },\n\n      // When the element that uses this mixin is in a :focus state, add a pseudo-element to\n      // create a border.\n      [`.${IsFocusVisibleClassName} &${isFocusedOnly ? ':focus' : ''}:after`]: {\n        content: '\"\"',\n        position: 'absolute',\n        left: inset + 1,\n        top: inset + 1,\n        bottom: inset + 1,\n        right: inset + 1,\n        border: `${width}px solid ${borderColor}`,\n        outline: `${width}px solid ${outlineColor}`,\n        zIndex: ZIndexes.FocusStyle,\n        selectors: {\n          [HighContrastSelector]: highContrastStyle,\n        },\n      },\n    },\n  };\n}\n\n/**\n * Generates style to clear browser specific focus styles.\n */\nexport function focusClear(): IRawStyle {\n  return {\n    selectors: {\n      '&::-moz-focus-inner': {\n        // Clear the focus border in Firefox. Reference: http://stackoverflow.com/a/199319/1436671\n        border: 0,\n      },\n      '&': {\n        // Clear browser specific focus styles and use transparent as placeholder for focus style\n        outline: 'transparent',\n      },\n    },\n  };\n}\n\n/**\n * Generates a style which can be used to set a border on focus.\n *\n * @param theme - The theme object to use.\n * @param inset - The number of pixels to inset the border (default 0)\n * @param width - The border width in pixels (default 1)\n * @param color - Color of the outline (default `theme.palette.neutralSecondary`)\n * @returns The style object.\n */\nexport function getFocusOutlineStyle(theme: ITheme, inset: number = 0, width: number = 1, color?: string): IRawStyle {\n  return {\n    selectors: {\n      [`:global(${IsFocusVisibleClassName}) &:focus`]: {\n        outline: `${width} solid ${color || theme.palette.neutralSecondary}`,\n        outlineOffset: `${-inset}px`,\n      },\n    },\n  };\n}\n\n/**\n * Generates text input border styles on focus.\n *\n * @param borderColor - Color of the border.\n * @param borderRadius - Radius of the border.\n * @param borderType - Type of the border.\n * @param borderPosition - Position of the border relative to the input element (default to -1\n * as it's the most common border width of the input element)\n * @returns The style object.\n */\nexport const getInputFocusStyle = (\n  borderColor: string,\n  borderRadius: string | number,\n  borderType: 'border' | 'borderBottom' = 'border',\n  borderPosition: number = -1,\n): IRawStyle => {\n  const isBorderBottom = borderType === 'borderBottom';\n\n  return {\n    borderColor,\n    selectors: {\n      ':after': {\n        pointerEvents: 'none',\n        content: \"''\",\n        position: 'absolute',\n        left: isBorderBottom ? 0 : borderPosition,\n        top: borderPosition,\n        bottom: borderPosition,\n        right: isBorderBottom ? 0 : borderPosition,\n        [borderType]: `2px solid ${borderColor}`,\n        borderRadius,\n        width: borderType === 'borderBottom' ? '100%' : undefined,\n        selectors: {\n          [HighContrastSelector]: {\n            [borderType === 'border' ? 'borderColor' : 'borderBottomColor']: 'Highlight',\n          },\n        },\n      },\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}