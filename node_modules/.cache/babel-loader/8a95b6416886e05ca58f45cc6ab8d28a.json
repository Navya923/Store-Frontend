{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { classNames, MS_ICON } from './Icon.styles';\nimport { css, getNativeProps, htmlElementProperties, memoizeFunction } from '../../Utilities';\nimport { getIcon } from '../../Styling';\nexport var getIconContent = memoizeFunction(function (iconName) {\n  var _a = getIcon(iconName) || {\n    subset: {},\n    code: undefined\n  },\n      code = _a.code,\n      subset = _a.subset;\n\n  if (!code) {\n    return null;\n  }\n\n  return {\n    children: code,\n    iconClassName: subset.className,\n    fontFamily: subset.fontFace && subset.fontFace.fontFamily,\n    mergeImageProps: subset.mergeImageProps\n  };\n}, undefined, true\n/*ignoreNullOrUndefinedResult */\n);\n/**\n * Fast icon component which only supports font glyphs (not images) and can't be targeted by customizations.\n * To style the icon, use `className` or reference `ms-Icon` in CSS.\n * {@docCategory Icon}\n */\n\nexport var FontIcon = function (props) {\n  var iconName = props.iconName,\n      className = props.className,\n      _a = props.style,\n      style = _a === void 0 ? {} : _a;\n  var iconContent = getIconContent(iconName) || {};\n  var iconClassName = iconContent.iconClassName,\n      children = iconContent.children,\n      fontFamily = iconContent.fontFamily,\n      mergeImageProps = iconContent.mergeImageProps;\n  var nativeProps = getNativeProps(props, htmlElementProperties);\n  var accessibleName = props['aria-label'] || props.title;\n  var containerProps = props['aria-label'] || props['aria-labelledby'] || props.title ? {\n    role: mergeImageProps ? undefined : 'img'\n  } : {\n    'aria-hidden': true\n  };\n  var finalChildren = children;\n\n  if (mergeImageProps) {\n    if (typeof children === 'object' && typeof children.props === 'object' && accessibleName) {\n      finalChildren = React.cloneElement(children, {\n        alt: accessibleName\n      });\n    }\n  }\n\n  return React.createElement(\"i\", __assign({\n    \"data-icon-name\": iconName\n  }, containerProps, nativeProps, mergeImageProps ? {\n    title: undefined,\n    'aria-label': undefined\n  } : {}, {\n    className: css(MS_ICON, classNames.root, iconClassName, !iconName && classNames.placeholder, className),\n    // Apply the font family this way to ensure it doesn't get overridden by Fabric Core ms-Icon styles\n    // https://github.com/microsoft/fluentui/issues/10449\n    style: __assign({\n      fontFamily: fontFamily\n    }, style)\n  }), finalChildren);\n};\n/**\n * Memoized helper for rendering a FontIcon.\n * @param iconName - The name of the icon to use from the icon font.\n * @param className - Class name for styling the icon.\n * @param ariaLabel - Label for the icon for the benefit of screen readers.\n * {@docCategory Icon}\n */\n\nexport var getFontIcon = memoizeFunction(function (iconName, className, ariaLabel) {\n  return FontIcon({\n    iconName: iconName,\n    className: className,\n    'aria-label': ariaLabel\n  });\n});","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,eAApC;AACA,SAASC,GAAT,EAAcC,cAAd,EAA8BC,qBAA9B,EAAqDC,eAArD,QAA4E,iBAA5E;AACA,SAASC,OAAT,QAAwB,eAAxB;AAWA,OAAO,IAAMC,cAAc,GAAGF,eAAe,CAC3C,UAACG,QAAD,EAAkB;AACV,WAAuFF,OAAO,CAACE,QAAD,CAAP,IAAqB;AAChHC,UAAM,EAAE,EADwG;AAEhHC,QAAI,EAAEC;AAF0G,GAA5G;AAAA,MAAED,IAAI,UAAN;AAAA,MAAQD,MAAM,YAAd;;AAKN,MAAI,CAACC,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AAED,SAAO;AACLE,YAAQ,EAAEF,IADL;AAELG,iBAAa,EAAEJ,MAAM,CAACK,SAFjB;AAGLC,cAAU,EAAEN,MAAM,CAACO,QAAP,IAAmBP,MAAM,CAACO,QAAP,CAAgBD,UAH1C;AAILE,mBAAe,EAAER,MAAM,CAACQ;AAJnB,GAAP;AAMD,CAjB0C,EAkB3CN,SAlB2C,EAmB3C;AAAK;AAnBsC,CAAtC;AAsBP;;;;;;AAKA,OAAO,IAAMO,QAAQ,GAA4C,iBAAK;AAC5D,cAAQ,GAA4BC,KAAK,SAAzC;AAAA,MAAUL,SAAS,GAAiBK,KAAK,UAAzC;AAAA,MAAqBC,KAAeD,KAAK,MAAzC;AAAA,MAAqBE,KAAK,mBAAG,EAAH,GAAKD,EAA/B;AACR,MAAME,WAAW,GAAGf,cAAc,CAACC,QAAD,CAAd,IAA4B,EAAhD;AACQ,mBAAa,GAA4Cc,WAAW,cAApE;AAAA,MAAeV,QAAQ,GAAkCU,WAAW,SAApE;AAAA,MAAyBP,UAAU,GAAsBO,WAAW,WAApE;AAAA,MAAqCL,eAAe,GAAKK,WAAW,gBAApE;AAER,MAAMC,WAAW,GAAGpB,cAAc,CAAoCgB,KAApC,EAA2Cf,qBAA3C,CAAlC;AACA,MAAMoB,cAAc,GAAGL,KAAK,CAAC,YAAD,CAAL,IAAuBA,KAAK,CAACM,KAApD;AACA,MAAMC,cAAc,GAClBP,KAAK,CAAC,YAAD,CAAL,IAAuBA,KAAK,CAAC,iBAAD,CAA5B,IAAmDA,KAAK,CAACM,KAAzD,GACI;AACEE,QAAI,EAAEV,eAAe,GAAGN,SAAH,GAAe;AADtC,GADJ,GAII;AACE,mBAAe;AADjB,GALN;AASA,MAAIiB,aAAa,GAAGhB,QAApB;;AAEA,MAAIK,eAAJ,EAAqB;AACnB,QAAI,OAAOL,QAAP,KAAoB,QAApB,IAAgC,OAAOA,QAAQ,CAACO,KAAhB,KAA0B,QAA1D,IAAsEK,cAA1E,EAA0F;AACxFI,mBAAa,GAAG7B,KAAK,CAAC8B,YAAN,CAAmBjB,QAAnB,EAA6B;AAAEkB,WAAG,EAAEN;AAAP,OAA7B,CAAhB;AACD;AACF;;AAED,SACEzB;AAAA,sBACkBS;AADlB,KAEMkB,cAFN,EAGMH,WAHN,EAION,eAAe,GAChB;AACEQ,SAAK,EAAEd,SADT;AAEE,kBAAcA;AAFhB,GADgB,GAKhB,EATN,EASS;AACPG,aAAS,EAAEZ,GAAG,CAACD,OAAD,EAAUD,UAAU,CAAC+B,IAArB,EAA2BlB,aAA3B,EAA0C,CAACL,QAAD,IAAaR,UAAU,CAACgC,WAAlE,EAA+ElB,SAA/E,CADP;AAEP;AACA;AACAO,SAAK;AAAIN,gBAAU;AAAd,OAAmBM,KAAnB;AAJE,GATT,GAeGO,aAfH,CADF;AAmBD,CA3CM;AA6CP;;;;;;;;AAOA,OAAO,IAAMK,WAAW,GAAG5B,eAAe,CAAC,UAACG,QAAD,EAAmBM,SAAnB,EAAuCoB,SAAvC,EAAyD;AAClG,SAAOhB,QAAQ,CAAC;AAAEV,YAAQ,UAAV;AAAYM,aAAS,WAArB;AAAuB,kBAAcoB;AAArC,GAAD,CAAf;AACD,CAFyC,CAAnC","names":["React","classNames","MS_ICON","css","getNativeProps","htmlElementProperties","memoizeFunction","getIcon","getIconContent","iconName","subset","code","undefined","children","iconClassName","className","fontFamily","fontFace","mergeImageProps","FontIcon","props","_a","style","iconContent","nativeProps","accessibleName","title","containerProps","role","finalChildren","cloneElement","alt","root","placeholder","getFontIcon","ariaLabel"],"sources":["/home/npr/Downloads/Final FrontEnd (2)/node_modules/@fluentui/react/lib/components/src/components/Icon/FontIcon.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames, MS_ICON } from './Icon.styles';\nimport { css, getNativeProps, htmlElementProperties, memoizeFunction } from '../../Utilities';\nimport { getIcon } from '../../Styling';\nimport type { IFontIconProps } from './Icon.types';\nimport type { IIconRecord, IIconSubsetRecord } from '../../Styling';\n\nexport interface IIconContent {\n  children?: string | JSX.Element;\n  iconClassName?: string;\n  fontFamily?: string;\n  mergeImageProps?: boolean;\n}\n\nexport const getIconContent = memoizeFunction(\n  (iconName?: string): IIconContent | null => {\n    const { code, subset }: Pick<IIconRecord, 'code'> & { subset: Partial<IIconSubsetRecord> } = getIcon(iconName) || {\n      subset: {},\n      code: undefined,\n    };\n\n    if (!code) {\n      return null;\n    }\n\n    return {\n      children: code,\n      iconClassName: subset.className,\n      fontFamily: subset.fontFace && subset.fontFace.fontFamily,\n      mergeImageProps: subset.mergeImageProps,\n    };\n  },\n  undefined,\n  true /*ignoreNullOrUndefinedResult */,\n);\n\n/**\n * Fast icon component which only supports font glyphs (not images) and can't be targeted by customizations.\n * To style the icon, use `className` or reference `ms-Icon` in CSS.\n * {@docCategory Icon}\n */\nexport const FontIcon: React.FunctionComponent<IFontIconProps> = props => {\n  const { iconName, className, style = {} } = props;\n  const iconContent = getIconContent(iconName) || {};\n  const { iconClassName, children, fontFamily, mergeImageProps } = iconContent;\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLElement>>(props, htmlElementProperties);\n  const accessibleName = props['aria-label'] || props.title;\n  const containerProps =\n    props['aria-label'] || props['aria-labelledby'] || props.title\n      ? {\n          role: mergeImageProps ? undefined : 'img',\n        }\n      : {\n          'aria-hidden': true,\n        };\n\n  let finalChildren = children;\n\n  if (mergeImageProps) {\n    if (typeof children === 'object' && typeof children.props === 'object' && accessibleName) {\n      finalChildren = React.cloneElement(children, { alt: accessibleName });\n    }\n  }\n\n  return (\n    <i\n      data-icon-name={iconName}\n      {...containerProps}\n      {...nativeProps}\n      {...(mergeImageProps\n        ? {\n            title: undefined,\n            'aria-label': undefined,\n          }\n        : {})}\n      className={css(MS_ICON, classNames.root, iconClassName, !iconName && classNames.placeholder, className)}\n      // Apply the font family this way to ensure it doesn't get overridden by Fabric Core ms-Icon styles\n      // https://github.com/microsoft/fluentui/issues/10449\n      style={{ fontFamily, ...style }}\n    >\n      {finalChildren}\n    </i>\n  );\n};\n\n/**\n * Memoized helper for rendering a FontIcon.\n * @param iconName - The name of the icon to use from the icon font.\n * @param className - Class name for styling the icon.\n * @param ariaLabel - Label for the icon for the benefit of screen readers.\n * {@docCategory Icon}\n */\nexport const getFontIcon = memoizeFunction((iconName: string, className?: string, ariaLabel?: string) => {\n  return FontIcon({ iconName, className, 'aria-label': ariaLabel });\n});\n"]},"metadata":{},"sourceType":"module"}