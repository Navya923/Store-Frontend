{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { KeytipManager } from '../../utilities/keytips/KeytipManager';\nimport { useConst, usePrevious } from '@fluentui/react-hooks';\n\nvar registerPersistedKeytips = function (keytipsToRegister, keytipManager, registeredPersistedKeytips) {\n  for (var _i = 0, keytipsToRegister_1 = keytipsToRegister; _i < keytipsToRegister_1.length; _i++) {\n    var keytip = keytipsToRegister_1[_i];\n    var uniqueID = keytipManager.register(keytip, true); // Update map\n\n    registeredPersistedKeytips[uniqueID] = keytip;\n  }\n};\n\nvar unregisterPersistedKeytips = function (keytipManager, registeredPersistedKeytips) {\n  for (var _i = 0, _a = Object.keys(registeredPersistedKeytips); _i < _a.length; _i++) {\n    var uniqueID = _a[_i];\n    keytipManager.unregister(registeredPersistedKeytips[uniqueID], uniqueID, true);\n    delete registeredPersistedKeytips[uniqueID];\n  }\n};\n\nvar useKeytipRegistrations = function (registeredPersistedKeytips, keytipsToRegister, keytipManager) {\n  var prevPersistedKeytips = usePrevious(registeredPersistedKeytips); // Update\n\n  React.useEffect(function () {\n    if (prevPersistedKeytips) {\n      // Unregister old keytips\n      unregisterPersistedKeytips(keytipManager, prevPersistedKeytips); // Register new keytips\n\n      registerPersistedKeytips(keytipsToRegister, keytipManager, registeredPersistedKeytips);\n    }\n  }); // Mount/Unmount\n\n  React.useEffect(function () {\n    // Register on mount\n    registerPersistedKeytips(keytipsToRegister, keytipManager, registeredPersistedKeytips);\n    return function () {\n      // Unregister on unmount\n      unregisterPersistedKeytips(keytipManager, registeredPersistedKeytips);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n};\n\nexport var OverflowButton = function (props) {\n  var keytipManager = KeytipManager.getInstance();\n  var className = props.className,\n      overflowItems = props.overflowItems,\n      keytipSequences = props.keytipSequences,\n      itemSubMenuProvider = props.itemSubMenuProvider,\n      onRenderOverflowButton = props.onRenderOverflowButton;\n  var persistedKeytips = useConst({}); // Gets the subMenu for an overflow item\n\n  var getSubMenuForItem = React.useCallback(function (item) {\n    // Checks if itemSubMenuProvider has been defined, if not defaults to subMenuProps\n    if (itemSubMenuProvider) {\n      return itemSubMenuProvider(item);\n    }\n\n    if (item.subMenuProps) {\n      return item.subMenuProps.items;\n    }\n\n    return undefined;\n  }, [itemSubMenuProvider]);\n\n  var _a = React.useMemo(function () {\n    var newKeytipsToRegister = [];\n    var newOverflowItems = [];\n\n    if (keytipSequences) {\n      overflowItems === null || overflowItems === void 0 ? void 0 : overflowItems.forEach(function (overflowItem) {\n        var _a;\n\n        var keytip = overflowItem.keytipProps;\n\n        if (keytip) {\n          // Create persisted keytip\n          var persistedKeytip = {\n            content: keytip.content,\n            keySequences: keytip.keySequences,\n            disabled: keytip.disabled || !!(overflowItem.disabled || overflowItem.isDisabled),\n            hasDynamicChildren: keytip.hasDynamicChildren,\n            hasMenu: keytip.hasMenu\n          };\n\n          if (keytip.hasDynamicChildren || getSubMenuForItem(overflowItem)) {\n            // If the keytip has a submenu or children nodes, change onExecute to persistedKeytipExecute\n            persistedKeytip.onExecute = keytipManager.menuExecute.bind(keytipManager, keytipSequences, (_a = overflowItem === null || overflowItem === void 0 ? void 0 : overflowItem.keytipProps) === null || _a === void 0 ? void 0 : _a.keySequences);\n            persistedKeytip.hasOverflowSubMenu = true;\n          } else {\n            // If the keytip doesn't have a submenu, just execute the original function\n            persistedKeytip.onExecute = keytip.onExecute;\n          }\n\n          newKeytipsToRegister.push(persistedKeytip); // Add the overflow sequence to this item\n\n          var newOverflowItem = __assign(__assign({}, overflowItem), {\n            keytipProps: __assign(__assign({}, keytip), {\n              overflowSetSequence: keytipSequences\n            })\n          });\n\n          newOverflowItems === null || newOverflowItems === void 0 ? void 0 : newOverflowItems.push(newOverflowItem);\n        } else {\n          // Nothing to change, add overflowItem to list\n          newOverflowItems === null || newOverflowItems === void 0 ? void 0 : newOverflowItems.push(overflowItem);\n        }\n      });\n    } else {\n      newOverflowItems = overflowItems;\n    }\n\n    return {\n      modifiedOverflowItems: newOverflowItems,\n      keytipsToRegister: newKeytipsToRegister\n    };\n  }, [overflowItems, getSubMenuForItem, keytipManager, keytipSequences]),\n      modifiedOverflowItems = _a.modifiedOverflowItems,\n      keytipsToRegister = _a.keytipsToRegister;\n\n  useKeytipRegistrations(persistedKeytips, keytipsToRegister, keytipManager);\n  return React.createElement(\"div\", {\n    className: className\n  }, onRenderOverflowButton(modifiedOverflowItems));\n};","map":{"version":3,"sources":["/home/npr/Downloads/Final FrontEnd (2)/node_modules/@fluentui/react/lib/components/src/components/OverflowSet/OverflowButton.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { KeytipManager } from '../../utilities/keytips/KeytipManager';\nimport { useConst, usePrevious } from '@fluentui/react-hooks';\nimport type { IKeytipProps } from '../../Keytip';\nimport type { IOverflowSetItemProps, IOverflowSetProps } from './OverflowSet.types';\n\nconst registerPersistedKeytips = (\n  keytipsToRegister: IKeytipProps[],\n  keytipManager: KeytipManager,\n  registeredPersistedKeytips: { [uniqueID: string]: IKeytipProps },\n) => {\n  for (const keytip of keytipsToRegister) {\n    const uniqueID = keytipManager.register(keytip, true);\n    // Update map\n    registeredPersistedKeytips[uniqueID] = keytip;\n  }\n};\n\nconst unregisterPersistedKeytips = (\n  keytipManager: KeytipManager,\n  registeredPersistedKeytips: { [uniqueID: string]: IKeytipProps },\n) => {\n  for (const uniqueID of Object.keys(registeredPersistedKeytips)) {\n    keytipManager.unregister(registeredPersistedKeytips[uniqueID], uniqueID, true);\n    delete registeredPersistedKeytips[uniqueID];\n  }\n};\n\nconst useKeytipRegistrations = (\n  registeredPersistedKeytips: { [uniqueID: string]: IKeytipProps },\n  keytipsToRegister: IKeytipProps[],\n  keytipManager: KeytipManager,\n) => {\n  const prevPersistedKeytips = usePrevious(registeredPersistedKeytips);\n\n  // Update\n  React.useEffect(() => {\n    if (prevPersistedKeytips) {\n      // Unregister old keytips\n      unregisterPersistedKeytips(keytipManager, prevPersistedKeytips);\n      // Register new keytips\n      registerPersistedKeytips(keytipsToRegister, keytipManager, registeredPersistedKeytips);\n    }\n  });\n\n  // Mount/Unmount\n  React.useEffect(() => {\n    // Register on mount\n    registerPersistedKeytips(keytipsToRegister, keytipManager, registeredPersistedKeytips);\n    return () => {\n      // Unregister on unmount\n      unregisterPersistedKeytips(keytipManager, registeredPersistedKeytips);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n};\n\nexport const OverflowButton = (props: IOverflowSetProps) => {\n  const keytipManager: KeytipManager = KeytipManager.getInstance();\n  const { className, overflowItems, keytipSequences, itemSubMenuProvider, onRenderOverflowButton } = props;\n\n  const persistedKeytips = useConst<{ [uniqueID: string]: IKeytipProps }>({});\n\n  // Gets the subMenu for an overflow item\n  const getSubMenuForItem = React.useCallback(\n    (item: IOverflowSetItemProps) => {\n      // Checks if itemSubMenuProvider has been defined, if not defaults to subMenuProps\n      if (itemSubMenuProvider) {\n        return itemSubMenuProvider(item);\n      }\n      if (item.subMenuProps) {\n        return item.subMenuProps.items;\n      }\n      return undefined;\n    },\n    [itemSubMenuProvider],\n  );\n\n  const { modifiedOverflowItems, keytipsToRegister } = React.useMemo(() => {\n    const newKeytipsToRegister: IKeytipProps[] = [];\n    let newOverflowItems: IOverflowSetItemProps[] | undefined = [];\n\n    if (keytipSequences) {\n      overflowItems?.forEach(overflowItem => {\n        const keytip = (overflowItem as IOverflowSetItemProps).keytipProps;\n\n        if (keytip) {\n          // Create persisted keytip\n          const persistedKeytip: IKeytipProps = {\n            content: keytip.content,\n            keySequences: keytip.keySequences,\n            disabled: keytip.disabled || !!(overflowItem.disabled || overflowItem.isDisabled),\n            hasDynamicChildren: keytip.hasDynamicChildren,\n            hasMenu: keytip.hasMenu,\n          };\n\n          if (keytip.hasDynamicChildren || getSubMenuForItem(overflowItem)) {\n            // If the keytip has a submenu or children nodes, change onExecute to persistedKeytipExecute\n            persistedKeytip.onExecute = keytipManager.menuExecute.bind(\n              keytipManager,\n              keytipSequences,\n              overflowItem?.keytipProps?.keySequences,\n            );\n            persistedKeytip.hasOverflowSubMenu = true;\n          } else {\n            // If the keytip doesn't have a submenu, just execute the original function\n            persistedKeytip.onExecute = keytip.onExecute;\n          }\n\n          newKeytipsToRegister.push(persistedKeytip);\n\n          // Add the overflow sequence to this item\n          const newOverflowItem = {\n            ...overflowItem,\n            keytipProps: {\n              ...keytip,\n              overflowSetSequence: keytipSequences,\n            },\n          };\n          newOverflowItems?.push(newOverflowItem);\n        } else {\n          // Nothing to change, add overflowItem to list\n          newOverflowItems?.push(overflowItem);\n        }\n      });\n    } else {\n      newOverflowItems = overflowItems;\n    }\n    return { modifiedOverflowItems: newOverflowItems, keytipsToRegister: newKeytipsToRegister };\n  }, [overflowItems, getSubMenuForItem, keytipManager, keytipSequences]);\n\n  useKeytipRegistrations(persistedKeytips, keytipsToRegister, keytipManager);\n\n  return <div className={className}>{onRenderOverflowButton(modifiedOverflowItems)}</div>;\n};\n"]},"metadata":{},"sourceType":"module"}