{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, getNativeProps, imgProperties } from '../../Utilities';\nimport { ImageCoverStyle, ImageFit, ImageLoadState } from './Image.types';\nimport { useIsomorphicLayoutEffect, useMergedRefs } from '@fluentui/react-hooks';\nvar getClassNames = classNamesFunction();\nvar SVG_REGEX = /\\.svg$/i;\nvar KEY_PREFIX = 'fabricImage';\n\nfunction useLoadState(props, imageElement) {\n  var onLoadingStateChange = props.onLoadingStateChange,\n      onLoad = props.onLoad,\n      onError = props.onError,\n      src = props.src;\n\n  var _a = React.useState(ImageLoadState.notLoaded),\n      loadState = _a[0],\n      setLoadState = _a[1];\n\n  useIsomorphicLayoutEffect(function () {\n    // If the src property changes, reset the load state\n    // (does nothing if the load state is already notLoaded)\n    setLoadState(ImageLoadState.notLoaded);\n  }, [src]); // eslint-disable-next-line react-hooks/exhaustive-deps -- intended to run every render\n\n  React.useEffect(function () {\n    if (loadState === ImageLoadState.notLoaded) {\n      // testing if naturalWidth and naturalHeight are greater than zero is better than checking\n      // .complete, because .complete will also be set to true if the image breaks. However,\n      // for some browsers, SVG images do not have a naturalWidth or naturalHeight, so fall back\n      // to checking .complete for these images.\n      var isLoaded = imageElement.current ? src && imageElement.current.naturalWidth > 0 && imageElement.current.naturalHeight > 0 || imageElement.current.complete && SVG_REGEX.test(src) : false;\n\n      if (isLoaded) {\n        setLoadState(ImageLoadState.loaded);\n      }\n    }\n  });\n  React.useEffect(function () {\n    onLoadingStateChange === null || onLoadingStateChange === void 0 ? void 0 : onLoadingStateChange(loadState); // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run when loadState changes\n  }, [loadState]);\n  var onImageLoaded = React.useCallback(function (ev) {\n    onLoad === null || onLoad === void 0 ? void 0 : onLoad(ev);\n\n    if (src) {\n      setLoadState(ImageLoadState.loaded);\n    }\n  }, [src, onLoad]);\n  var onImageError = React.useCallback(function (ev) {\n    onError === null || onError === void 0 ? void 0 : onError(ev);\n    setLoadState(ImageLoadState.error);\n  }, [onError]);\n  return [loadState, onImageLoaded, onImageError];\n}\n\nexport var ImageBase = React.forwardRef(function (props, forwardedRef) {\n  var frameElement = React.useRef();\n  var imageElement = React.useRef();\n\n  var _a = useLoadState(props, imageElement),\n      loadState = _a[0],\n      onImageLoaded = _a[1],\n      onImageError = _a[2];\n\n  var imageProps = getNativeProps(props, imgProperties, ['width', 'height']);\n  var src = props.src,\n      alt = props.alt,\n      width = props.width,\n      height = props.height,\n      _b = props.shouldFadeIn,\n      shouldFadeIn = _b === void 0 ? true : _b,\n      shouldStartVisible = props.shouldStartVisible,\n      className = props.className,\n      imageFit = props.imageFit,\n      role = props.role,\n      maximizeFrame = props.maximizeFrame,\n      styles = props.styles,\n      theme = props.theme,\n      loading = props.loading;\n  var coverStyle = useCoverStyle(props, loadState, imageElement, frameElement);\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    className: className,\n    width: width,\n    height: height,\n    maximizeFrame: maximizeFrame,\n    shouldFadeIn: shouldFadeIn,\n    shouldStartVisible: shouldStartVisible,\n    isLoaded: loadState === ImageLoadState.loaded || loadState === ImageLoadState.notLoaded && props.shouldStartVisible,\n    isLandscape: coverStyle === ImageCoverStyle.landscape,\n    isCenter: imageFit === ImageFit.center,\n    isCenterContain: imageFit === ImageFit.centerContain,\n    isCenterCover: imageFit === ImageFit.centerCover,\n    isContain: imageFit === ImageFit.contain,\n    isCover: imageFit === ImageFit.cover,\n    isNone: imageFit === ImageFit.none,\n    isError: loadState === ImageLoadState.error,\n    isNotImageFit: imageFit === undefined\n  }); // If image dimensions aren't specified, the natural size of the image is used.\n\n  return React.createElement(\"div\", {\n    className: classNames.root,\n    style: {\n      width: width,\n      height: height\n    },\n    ref: frameElement\n  }, React.createElement(\"img\", __assign({}, imageProps, {\n    onLoad: onImageLoaded,\n    onError: onImageError,\n    key: KEY_PREFIX + props.src || '',\n    className: classNames.image,\n    ref: useMergedRefs(imageElement, forwardedRef),\n    src: src,\n    alt: alt,\n    role: role,\n    loading: loading\n  })));\n});\nImageBase.displayName = 'ImageBase';\n\nfunction useCoverStyle(props, loadState, imageElement, frameElement) {\n  var previousLoadState = React.useRef(loadState);\n  var coverStyle = React.useRef();\n\n  if (coverStyle === undefined || previousLoadState.current === ImageLoadState.notLoaded && loadState === ImageLoadState.loaded) {\n    coverStyle.current = computeCoverStyle(props, loadState, imageElement, frameElement);\n  }\n\n  previousLoadState.current = loadState;\n  return coverStyle.current;\n}\n\nfunction computeCoverStyle(props, loadState, imageElement, frameElement) {\n  var imageFit = props.imageFit,\n      width = props.width,\n      height = props.height; // Do not compute cover style if it was already specified in props\n\n  if (props.coverStyle !== undefined) {\n    return props.coverStyle;\n  } else if (loadState === ImageLoadState.loaded && (imageFit === ImageFit.cover || imageFit === ImageFit.contain || imageFit === ImageFit.centerContain || imageFit === ImageFit.centerCover) && imageElement.current && frameElement.current) {\n    // Determine the desired ratio using the width and height props.\n    // If those props aren't available, measure measure the frame.\n    var desiredRatio = void 0;\n\n    if (typeof width === 'number' && typeof height === 'number' && imageFit !== ImageFit.centerContain && imageFit !== ImageFit.centerCover) {\n      desiredRatio = width / height;\n    } else {\n      desiredRatio = frameElement.current.clientWidth / frameElement.current.clientHeight;\n    } // Examine the source image to determine its original ratio.\n\n\n    var naturalRatio = imageElement.current.naturalWidth / imageElement.current.naturalHeight; // Should we crop from the top or the sides?\n\n    if (naturalRatio > desiredRatio) {\n      return ImageCoverStyle.landscape;\n    }\n  }\n\n  return ImageCoverStyle.portrait;\n}","map":{"version":3,"mappings":"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","names":["React","classNamesFunction","getNativeProps","imgProperties","ImageCoverStyle","ImageFit","ImageLoadState","useIsomorphicLayoutEffect","useMergedRefs","getClassNames","SVG_REGEX","KEY_PREFIX","useLoadState","props","imageElement","onLoad","onError","src","useState","notLoaded","loadState","setLoadState","useEffect","isLoaded","current","naturalWidth","naturalHeight","complete","test","loaded","onLoadingStateChange","onImageLoaded","useCallback","ev","onImageError","error","ImageBase","forwardRef","forwardedRef","frameElement","useRef","imageProps","alt","width","height","_b","shouldFadeIn","shouldStartVisible","className","imageFit","role","maximizeFrame","styles","theme","loading","coverStyle","useCoverStyle","classNames","isLandscape","landscape","isCenter","center","isCenterContain","centerContain","isCenterCover","centerCover","isContain","contain","isCover","cover","isNone","none","isError","isNotImageFit","undefined","root","style","ref","key","image","displayName","previousLoadState","computeCoverStyle","desiredRatio","clientWidth","clientHeight","naturalRatio","portrait"],"sources":["/home/npr/Downloads/Final FrontEnd (2)/node_modules/@fluentui/react/lib/components/src/components/Image/Image.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, getNativeProps, imgProperties } from '../../Utilities';\nimport { ImageCoverStyle, ImageFit, ImageLoadState } from './Image.types';\nimport { useIsomorphicLayoutEffect, useMergedRefs } from '@fluentui/react-hooks';\nimport type { IImageProps, IImageStyleProps, IImageStyles } from './Image.types';\n\nconst getClassNames = classNamesFunction<IImageStyleProps, IImageStyles>();\n\nexport interface IImageState {\n  loadState?: ImageLoadState;\n}\n\nconst SVG_REGEX = /\\.svg$/i;\nconst KEY_PREFIX = 'fabricImage';\n\nfunction useLoadState(\n  props: IImageProps,\n  imageElement: React.RefObject<HTMLImageElement>,\n): readonly [\n  ImageLoadState,\n  /* onImageLoad */ (ev: React.SyntheticEvent<HTMLImageElement>) => void,\n  /* onImageError */ (ev: React.SyntheticEvent<HTMLImageElement>) => void,\n] {\n  const { onLoadingStateChange, onLoad, onError, src } = props;\n\n  const [loadState, setLoadState] = React.useState<ImageLoadState>(ImageLoadState.notLoaded);\n\n  useIsomorphicLayoutEffect(() => {\n    // If the src property changes, reset the load state\n    // (does nothing if the load state is already notLoaded)\n    setLoadState(ImageLoadState.notLoaded);\n  }, [src]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps -- intended to run every render\n  React.useEffect(() => {\n    if (loadState === ImageLoadState.notLoaded) {\n      // testing if naturalWidth and naturalHeight are greater than zero is better than checking\n      // .complete, because .complete will also be set to true if the image breaks. However,\n      // for some browsers, SVG images do not have a naturalWidth or naturalHeight, so fall back\n      // to checking .complete for these images.\n      const isLoaded: boolean = imageElement.current\n        ? (src && imageElement.current.naturalWidth > 0 && imageElement.current.naturalHeight > 0) ||\n          (imageElement.current.complete && SVG_REGEX.test(src!))\n        : false;\n\n      if (isLoaded) {\n        setLoadState(ImageLoadState.loaded);\n      }\n    }\n  });\n\n  React.useEffect(() => {\n    onLoadingStateChange?.(loadState);\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run when loadState changes\n  }, [loadState]);\n\n  const onImageLoaded = React.useCallback(\n    (ev: React.SyntheticEvent<HTMLImageElement>) => {\n      onLoad?.(ev);\n      if (src) {\n        setLoadState(ImageLoadState.loaded);\n      }\n    },\n    [src, onLoad],\n  );\n\n  const onImageError = React.useCallback(\n    (ev: React.SyntheticEvent<HTMLImageElement>) => {\n      onError?.(ev);\n      setLoadState(ImageLoadState.error);\n    },\n    [onError],\n  );\n\n  return [loadState, onImageLoaded, onImageError] as const;\n}\n\nexport const ImageBase: React.FunctionComponent<IImageProps> = React.forwardRef<HTMLImageElement, IImageProps>(\n  (props, forwardedRef) => {\n    const frameElement = React.useRef<HTMLDivElement>() as React.RefObject<HTMLDivElement>;\n    const imageElement = React.useRef<HTMLImageElement>() as React.RefObject<HTMLImageElement>;\n    const [loadState, onImageLoaded, onImageError] = useLoadState(props, imageElement);\n\n    const imageProps = getNativeProps<React.ImgHTMLAttributes<HTMLImageElement>>(props, imgProperties, [\n      'width',\n      'height',\n    ]);\n    const {\n      src,\n      alt,\n      width,\n      height,\n      shouldFadeIn = true,\n      shouldStartVisible,\n      className,\n      imageFit,\n      role,\n      maximizeFrame,\n      styles,\n      theme,\n      loading,\n    } = props;\n    const coverStyle = useCoverStyle(props, loadState, imageElement, frameElement);\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      width,\n      height,\n      maximizeFrame,\n      shouldFadeIn,\n      shouldStartVisible,\n      isLoaded:\n        loadState === ImageLoadState.loaded || (loadState === ImageLoadState.notLoaded && props.shouldStartVisible),\n      isLandscape: coverStyle === ImageCoverStyle.landscape,\n      isCenter: imageFit === ImageFit.center,\n      isCenterContain: imageFit === ImageFit.centerContain,\n      isCenterCover: imageFit === ImageFit.centerCover,\n      isContain: imageFit === ImageFit.contain,\n      isCover: imageFit === ImageFit.cover,\n      isNone: imageFit === ImageFit.none,\n      isError: loadState === ImageLoadState.error,\n      isNotImageFit: imageFit === undefined,\n    });\n\n    // If image dimensions aren't specified, the natural size of the image is used.\n    return (\n      <div className={classNames.root} style={{ width: width, height: height }} ref={frameElement}>\n        <img\n          {...imageProps}\n          onLoad={onImageLoaded}\n          onError={onImageError}\n          key={KEY_PREFIX + props.src || ''}\n          className={classNames.image}\n          ref={useMergedRefs(imageElement, forwardedRef)}\n          src={src}\n          alt={alt}\n          role={role}\n          loading={loading}\n        />\n      </div>\n    );\n  },\n);\nImageBase.displayName = 'ImageBase';\n\nfunction useCoverStyle(\n  props: IImageProps,\n  loadState: ImageLoadState,\n  imageElement: React.RefObject<HTMLImageElement>,\n  frameElement: React.RefObject<HTMLDivElement>,\n) {\n  const previousLoadState = React.useRef(loadState);\n  const coverStyle = React.useRef<ImageCoverStyle | undefined>();\n\n  if (\n    coverStyle === undefined ||\n    (previousLoadState.current === ImageLoadState.notLoaded && loadState === ImageLoadState.loaded)\n  ) {\n    coverStyle.current = computeCoverStyle(props, loadState, imageElement, frameElement);\n  }\n\n  previousLoadState.current = loadState;\n\n  return coverStyle.current!;\n}\n\nfunction computeCoverStyle(\n  props: IImageProps,\n  loadState: ImageLoadState,\n  imageElement: React.RefObject<HTMLImageElement>,\n  frameElement: React.RefObject<HTMLDivElement>,\n): ImageCoverStyle {\n  const { imageFit, width, height } = props;\n\n  // Do not compute cover style if it was already specified in props\n  if (props.coverStyle !== undefined) {\n    return props.coverStyle;\n  } else if (\n    loadState === ImageLoadState.loaded &&\n    (imageFit === ImageFit.cover ||\n      imageFit === ImageFit.contain ||\n      imageFit === ImageFit.centerContain ||\n      imageFit === ImageFit.centerCover) &&\n    imageElement.current &&\n    frameElement.current\n  ) {\n    // Determine the desired ratio using the width and height props.\n    // If those props aren't available, measure measure the frame.\n    let desiredRatio;\n    if (\n      typeof width === 'number' &&\n      typeof height === 'number' &&\n      imageFit !== ImageFit.centerContain &&\n      imageFit !== ImageFit.centerCover\n    ) {\n      desiredRatio = width / height;\n    } else {\n      desiredRatio = frameElement.current.clientWidth / frameElement.current.clientHeight;\n    }\n\n    // Examine the source image to determine its original ratio.\n    const naturalRatio = imageElement.current.naturalWidth / imageElement.current.naturalHeight;\n\n    // Should we crop from the top or the sides?\n    if (naturalRatio > desiredRatio) {\n      return ImageCoverStyle.landscape;\n    }\n  }\n  return ImageCoverStyle.portrait;\n}\n"]},"metadata":{},"sourceType":"module"}