{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport * as React from 'react';\nimport { useConst, useIsomorphicLayoutEffect, usePrevious } from '@fluentui/react-hooks';\nimport { mergeAriaAttributeValues } from '../../Utilities';\nimport { KeytipManager, mergeOverflows, sequencesToID, getAriaDescribedBy } from '../../utilities/keytips/index';\n/**\n * Hook that creates attributes for components which are enabled with Keytip.\n */\n\nexport function useKeytipData(options) {\n  var uniqueId = React.useRef();\n  var keytipProps = options.keytipProps ? __assign({\n    disabled: options.disabled\n  }, options.keytipProps) : undefined;\n  var keytipManager = useConst(KeytipManager.getInstance());\n  var prevOptions = usePrevious(options); // useLayoutEffect used to strictly emulate didUpdate/didMount behavior\n\n  useIsomorphicLayoutEffect(function () {\n    if (uniqueId.current && keytipProps && ((prevOptions === null || prevOptions === void 0 ? void 0 : prevOptions.keytipProps) !== options.keytipProps || (prevOptions === null || prevOptions === void 0 ? void 0 : prevOptions.disabled) !== options.disabled)) {\n      keytipManager.update(keytipProps, uniqueId.current);\n    }\n  });\n  useIsomorphicLayoutEffect(function () {\n    // Register Keytip in KeytipManager\n    if (keytipProps) {\n      uniqueId.current = keytipManager.register(keytipProps);\n    }\n\n    return function () {\n      // Unregister Keytip in KeytipManager\n      keytipProps && keytipManager.unregister(keytipProps, uniqueId.current);\n    }; // this is meant to run only at mount, and updates are handled separately\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var nativeKeytipProps = {\n    ariaDescribedBy: undefined,\n    keytipId: undefined\n  };\n\n  if (keytipProps) {\n    nativeKeytipProps = getKeytipData(keytipManager, keytipProps, options.ariaDescribedBy);\n  }\n\n  return nativeKeytipProps;\n}\n/**\n * Gets the aria- and data- attributes to attach to the component\n * @param keytipProps - options for Keytip\n * @param describedByPrepend - ariaDescribedBy value to prepend\n */\n\nfunction getKeytipData(keytipManager, keytipProps, describedByPrepend) {\n  // Add the parent overflow sequence if necessary\n  var newKeytipProps = keytipManager.addParentOverflow(keytipProps); // Construct aria-describedby and data-ktp-id attributes\n\n  var ariaDescribedBy = mergeAriaAttributeValues(describedByPrepend, getAriaDescribedBy(newKeytipProps.keySequences));\n\n  var keySequences = __spreadArray([], newKeytipProps.keySequences);\n\n  if (newKeytipProps.overflowSetSequence) {\n    keySequences = mergeOverflows(keySequences, newKeytipProps.overflowSetSequence);\n  }\n\n  var keytipId = sequencesToID(keySequences);\n  return {\n    ariaDescribedBy: ariaDescribedBy,\n    keytipId: keytipId\n  };\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,yBAAnB,EAA8CC,WAA9C,QAAiE,uBAAjE;AACA,SAASC,wBAAT,QAAyC,iBAAzC;AACA,SAASC,aAAT,EAAwBC,cAAxB,EAAwCC,aAAxC,EAAuDC,kBAAvD,QAAiF,+BAAjF;AASA;;;;AAGA,OAAM,SAAUC,aAAV,CAAwBC,OAAxB,EAAkD;AACtD,MAAMC,QAAQ,GAAGX,KAAK,CAACY,MAAN,EAAjB;AACA,MAAMC,WAAW,GAA6BH,OAAO,CAACG,WAAR,GAC3CC;AACGC,YAAQ,EAAEL,OAAO,CAACK;AADrB,KAEML,OAAO,CAACG,WAFd,CAD2C,GAK1CG,SALJ;AAOA,MAAMC,aAAa,GAAGhB,QAAQ,CAAgBI,aAAa,CAACa,WAAd,EAAhB,CAA9B;AACA,MAAMC,WAAW,GAAGhB,WAAW,CAACO,OAAD,CAA/B,CAVsD,CAYtD;;AACAR,2BAAyB,CAAC;AACxB,QACES,QAAQ,CAACS,OAAT,IACAP,WADA,KAEC,YAAW,SAAX,eAAW,WAAX,GAAW,MAAX,cAAW,CAAEA,WAAb,MAA6BH,OAAO,CAACG,WAArC,IAAoD,YAAW,SAAX,eAAW,WAAX,GAAW,MAAX,cAAW,CAAEE,QAAb,MAA0BL,OAAO,CAACK,QAFvF,CADF,EAIE;AACAE,mBAAa,CAACI,MAAd,CAAqBR,WAArB,EAAkCF,QAAQ,CAACS,OAA3C;AACD;AACF,GARwB,CAAzB;AAUAlB,2BAAyB,CAAC;AACxB;AACA,QAAIW,WAAJ,EAAiB;AACfF,cAAQ,CAACS,OAAT,GAAmBH,aAAa,CAACK,QAAd,CAAuBT,WAAvB,CAAnB;AACD;;AAED,WAAO;AACL;AACAA,iBAAW,IAAII,aAAa,CAACM,UAAd,CAAyBV,WAAzB,EAAsCF,QAAQ,CAACS,OAA/C,CAAf;AACD,KAHD,CANwB,CAUxB;AACA;AACD,GAZwB,EAYtB,EAZsB,CAAzB;AAcA,MAAII,iBAAiB,GAAgB;AACnCC,mBAAe,EAAET,SADkB;AAEnCU,YAAQ,EAAEV;AAFyB,GAArC;;AAKA,MAAIH,WAAJ,EAAiB;AACfW,qBAAiB,GAAGG,aAAa,CAACV,aAAD,EAAgBJ,WAAhB,EAA6BH,OAAO,CAACe,eAArC,CAAjC;AACD;;AAED,SAAOD,iBAAP;AACD;AAED;;;;;;AAKA,SAASG,aAAT,CACEV,aADF,EAEEJ,WAFF,EAGEe,kBAHF,EAG6B;AAE3B;AACA,MAAMC,cAAc,GAAGZ,aAAa,CAACa,iBAAd,CAAgCjB,WAAhC,CAAvB,CAH2B,CAK3B;;AACA,MAAMY,eAAe,GAAGrB,wBAAwB,CAC9CwB,kBAD8C,EAE9CpB,kBAAkB,CAACqB,cAAc,CAACE,YAAhB,CAF4B,CAAhD;;AAKA,MAAIA,YAAY,qBAAOF,cAAc,CAACE,YAAtB,CAAhB;;AACA,MAAIF,cAAc,CAACG,mBAAnB,EAAwC;AACtCD,gBAAY,GAAGzB,cAAc,CAACyB,YAAD,EAAeF,cAAc,CAACG,mBAA9B,CAA7B;AACD;;AACD,MAAMN,QAAQ,GAAGnB,aAAa,CAACwB,YAAD,CAA9B;AAEA,SAAO;AACLN,mBAAe,iBADV;AAELC,YAAQ;AAFH,GAAP;AAID","names":["React","useConst","useIsomorphicLayoutEffect","usePrevious","mergeAriaAttributeValues","KeytipManager","mergeOverflows","sequencesToID","getAriaDescribedBy","useKeytipData","options","uniqueId","useRef","keytipProps","__assign","disabled","undefined","keytipManager","getInstance","prevOptions","current","update","register","unregister","nativeKeytipProps","ariaDescribedBy","keytipId","getKeytipData","describedByPrepend","newKeytipProps","addParentOverflow","keySequences","overflowSetSequence"],"sources":["/home/npr/Downloads/Final FrontEnd (2)/node_modules/@fluentui/react/lib/components/src/components/KeytipData/useKeytipData.ts"],"sourcesContent":["import * as React from 'react';\nimport { useConst, useIsomorphicLayoutEffect, usePrevious } from '@fluentui/react-hooks';\nimport { mergeAriaAttributeValues } from '../../Utilities';\nimport { KeytipManager, mergeOverflows, sequencesToID, getAriaDescribedBy } from '../../utilities/keytips/index';\nimport type { KeytipDataOptions } from './KeytipData.types';\nimport type { IKeytipProps } from '../../Keytip';\n\nexport interface IKeytipData {\n  ariaDescribedBy: string | undefined;\n  keytipId: string | undefined;\n}\n\n/**\n * Hook that creates attributes for components which are enabled with Keytip.\n */\nexport function useKeytipData(options: KeytipDataOptions): IKeytipData {\n  const uniqueId = React.useRef<string>();\n  const keytipProps: IKeytipProps | undefined = options.keytipProps\n    ? {\n        disabled: options.disabled,\n        ...options.keytipProps,\n      }\n    : undefined;\n\n  const keytipManager = useConst<KeytipManager>(KeytipManager.getInstance());\n  const prevOptions = usePrevious(options);\n\n  // useLayoutEffect used to strictly emulate didUpdate/didMount behavior\n  useIsomorphicLayoutEffect(() => {\n    if (\n      uniqueId.current &&\n      keytipProps &&\n      (prevOptions?.keytipProps !== options.keytipProps || prevOptions?.disabled !== options.disabled)\n    ) {\n      keytipManager.update(keytipProps, uniqueId.current);\n    }\n  });\n\n  useIsomorphicLayoutEffect(() => {\n    // Register Keytip in KeytipManager\n    if (keytipProps) {\n      uniqueId.current = keytipManager.register(keytipProps);\n    }\n\n    return () => {\n      // Unregister Keytip in KeytipManager\n      keytipProps && keytipManager.unregister(keytipProps, uniqueId.current!);\n    };\n    // this is meant to run only at mount, and updates are handled separately\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let nativeKeytipProps: IKeytipData = {\n    ariaDescribedBy: undefined,\n    keytipId: undefined,\n  };\n\n  if (keytipProps) {\n    nativeKeytipProps = getKeytipData(keytipManager, keytipProps, options.ariaDescribedBy);\n  }\n\n  return nativeKeytipProps;\n}\n\n/**\n * Gets the aria- and data- attributes to attach to the component\n * @param keytipProps - options for Keytip\n * @param describedByPrepend - ariaDescribedBy value to prepend\n */\nfunction getKeytipData(\n  keytipManager: KeytipManager,\n  keytipProps: IKeytipProps,\n  describedByPrepend?: string,\n): IKeytipData {\n  // Add the parent overflow sequence if necessary\n  const newKeytipProps = keytipManager.addParentOverflow(keytipProps);\n\n  // Construct aria-describedby and data-ktp-id attributes\n  const ariaDescribedBy = mergeAriaAttributeValues(\n    describedByPrepend,\n    getAriaDescribedBy(newKeytipProps.keySequences),\n  )!;\n\n  let keySequences = [...newKeytipProps.keySequences];\n  if (newKeytipProps.overflowSetSequence) {\n    keySequences = mergeOverflows(keySequences, newKeytipProps.overflowSetSequence);\n  }\n  const keytipId = sequencesToID(keySequences);\n\n  return {\n    ariaDescribedBy,\n    keytipId,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}