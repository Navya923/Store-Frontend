{"ast":null,"code":"import * as React from 'react';\nimport { useConst } from './useConst';\n/**\n * Hook to store a value and generate callbacks for setting the value to true or false.\n * The identity of the callbacks will always stay the same.\n *\n * @param initialState - Initial value\n * @returns Array with the current value and an object containing the updater callbacks.\n */\n\nexport function useBoolean(initialState) {\n  var _a = React.useState(initialState),\n      value = _a[0],\n      setValue = _a[1];\n\n  var setTrue = useConst(function () {\n    return function () {\n      setValue(true);\n    };\n  });\n  var setFalse = useConst(function () {\n    return function () {\n      setValue(false);\n    };\n  });\n  var toggle = useConst(function () {\n    return function () {\n      setValue(function (currentValue) {\n        return !currentValue;\n      });\n    };\n  });\n  return [value, {\n    setTrue: setTrue,\n    setFalse: setFalse,\n    toggle: toggle\n  }];\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,YAAzB;AAYA;;;;;;;;AAOA,OAAM,SAAUC,UAAV,CAAqBC,YAArB,EAA0C;AACxC,WAAoBH,KAAK,CAACI,QAAN,CAAeD,YAAf,CAApB;AAAA,MAACE,KAAK,QAAN;AAAA,MAAQC,QAAQ,QAAhB;;AAEN,MAAMC,OAAO,GAAGN,QAAQ,CAAC;AAAM;AAC7BK,cAAQ,CAAC,IAAD,CAAR;AACD,KAF8B;AAE9B,GAFuB,CAAxB;AAGA,MAAME,QAAQ,GAAGP,QAAQ,CAAC;AAAM;AAC9BK,cAAQ,CAAC,KAAD,CAAR;AACD,KAF+B;AAE/B,GAFwB,CAAzB;AAGA,MAAMG,MAAM,GAAGR,QAAQ,CAAC;AAAM;AAC5BK,cAAQ,CAAC,wBAAY;AAAI,gBAACI,YAAD;AAAa,OAA9B,CAAR;AACD,KAF6B;AAE7B,GAFsB,CAAvB;AAIA,SAAO,CAACL,KAAD,EAAQ;AAAEE,WAAO,SAAT;AAAWC,YAAQ,UAAnB;AAAqBC,UAAM;AAA3B,GAAR,CAAP;AACD","names":["React","useConst","useBoolean","initialState","useState","value","setValue","setTrue","setFalse","toggle","currentValue"],"sources":["/home/npr/Downloads/Final FrontEnd (2)/node_modules/@fluentui/react-hooks/src/useBoolean.ts"],"sourcesContent":["import * as React from 'react';\nimport { useConst } from './useConst';\n\n/** Updater callbacks returned by `useBoolean`. */\nexport interface IUseBooleanCallbacks {\n  /** Set the value to true. Always has the same identity. */\n  setTrue: () => void;\n  /** Set the value to false. Always has the same identity. */\n  setFalse: () => void;\n  /** Toggle the value. Always has the same identity. */\n  toggle: () => void;\n}\n\n/**\n * Hook to store a value and generate callbacks for setting the value to true or false.\n * The identity of the callbacks will always stay the same.\n *\n * @param initialState - Initial value\n * @returns Array with the current value and an object containing the updater callbacks.\n */\nexport function useBoolean(initialState: boolean): [boolean, IUseBooleanCallbacks] {\n  const [value, setValue] = React.useState(initialState);\n\n  const setTrue = useConst(() => () => {\n    setValue(true);\n  });\n  const setFalse = useConst(() => () => {\n    setValue(false);\n  });\n  const toggle = useConst(() => () => {\n    setValue(currentValue => !currentValue);\n  });\n\n  return [value, { setTrue, setFalse, toggle }];\n}\n"]},"metadata":{},"sourceType":"module"}