{"ast":null,"code":"var _layersByHostId = {};\nvar _layerHostsById = {};\n\nvar _defaultHostSelector;\n/**\n * Register a layer for a given host id\n * @param hostId Id of the layer host\n * @param layer Layer instance\n */\n\n\nexport function registerLayer(hostId, callback) {\n  if (!_layersByHostId[hostId]) {\n    _layersByHostId[hostId] = [];\n  }\n\n  _layersByHostId[hostId].push(callback);\n\n  var layerHosts = _layerHostsById[hostId];\n\n  if (layerHosts) {\n    for (var _i = 0, layerHosts_1 = layerHosts; _i < layerHosts_1.length; _i++) {\n      var layerHost = layerHosts_1[_i];\n      layerHost.notifyLayersChanged();\n    }\n  }\n}\n/**\n * Unregister a layer for a given host id\n * @param hostId Id of the layer host\n * @param layer Layer instance\n */\n\nexport function unregisterLayer(hostId, callback) {\n  var layers = _layersByHostId[hostId];\n\n  if (layers) {\n    var idx = layers.indexOf(callback);\n\n    if (idx >= 0) {\n      layers.splice(idx, 1);\n\n      if (layers.length === 0) {\n        delete _layersByHostId[hostId];\n      }\n    }\n  }\n\n  var layerHosts = _layerHostsById[hostId];\n\n  if (layerHosts) {\n    for (var _i = 0, layerHosts_2 = layerHosts; _i < layerHosts_2.length; _i++) {\n      var layerHost = layerHosts_2[_i];\n      layerHost.notifyLayersChanged();\n    }\n  }\n}\n/**\n * Gets the number of layers currently registered with a host id.\n * @param hostId Id of the layer host.\n * @returns The number of layers currently registered with the host.\n */\n\nexport function getLayerCount(hostId) {\n  var layers = _layerHostsById[hostId];\n  return layers ? layers.length : 0;\n}\n/**\n * Gets the Layer Host instance associated with a hostId, if applicable.\n * @param hostId\n * @returns A component ref for the associated layer host.\n */\n\nexport function getLayerHost(hostId) {\n  var layerHosts = _layerHostsById[hostId];\n  return layerHosts && layerHosts[0] || undefined;\n}\n/**\n * Registers a Layer Host with an associated hostId.\n * @param hostId Id of the layer host\n * @param layerHost layer host instance\n */\n\nexport function registerLayerHost(hostId, layerHost) {\n  var layerHosts = _layerHostsById[hostId] || (_layerHostsById[hostId] = []); // Insert this at the start of an array to avoid race conditions between mount and unmount.\n  // If a LayerHost is re-mounted, and mount of the new instance may occur before the unmount of the old one.\n  // Putting the new instance at the start of this array ensures that calls to `getLayerHost` will immediately\n  // get the new one even if the old one is around briefly.\n\n  layerHosts.unshift(layerHost);\n}\n/**\n * Unregisters a Layer Host from the associated hostId.\n * @param hostId Id of the layer host\n * @param layerHost layer host instance\n */\n\nexport function unregisterLayerHost(hostId, layerHost) {\n  var layerHosts = _layerHostsById[hostId];\n\n  if (layerHosts) {\n    var idx = layerHosts.indexOf(layerHost);\n\n    if (idx >= 0) {\n      layerHosts.splice(idx, 1);\n    }\n\n    if (layerHosts.length === 0) {\n      delete _layerHostsById[hostId];\n    }\n  }\n}\n/**\n * Used for notifying applicable Layers that a host is available/unavailable and to re-evaluate Layers that\n * care about the specific host.\n */\n\nexport function notifyHostChanged(id) {\n  if (_layersByHostId[id]) {\n    _layersByHostId[id].forEach(function (callback) {\n      return callback();\n    });\n  }\n}\n/**\n * Sets the default target selector to use when determining the host in which\n * Layered content will be injected into. If not provided, an element will be\n * created at the end of the document body.\n *\n * Passing in a falsy value will clear the default target and reset back to\n * using a created element at the end of document body.\n */\n\nexport function setDefaultTarget(selector) {\n  _defaultHostSelector = selector;\n}\n/**\n * Get the default target selector when determining a host\n */\n\nexport function getDefaultTarget() {\n  return _defaultHostSelector;\n}","map":{"version":3,"mappings":"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","names":["_layersByHostId","_layerHostsById","_defaultHostSelector","registerLayer","hostId","callback","push","layerHosts","_i","layerHost","notifyLayersChanged","unregisterLayer","layers","idx","indexOf","splice","length","getLayerCount","getLayerHost","undefined","registerLayerHost","unshift","unregisterLayerHost","notifyHostChanged","id","forEach","setDefaultTarget","selector","getDefaultTarget"],"sources":["/home/npr/Downloads/Final FrontEnd (2)/node_modules/@fluentui/react/lib/components/src/components/Layer/Layer.notification.ts"],"sourcesContent":["import { ILayerHost } from './LayerHost.types';\n\nconst _layersByHostId: { [hostId: string]: (() => void)[] } = {};\nconst _layerHostsById: { [hostId: string]: ILayerHost[] } = {};\n\nlet _defaultHostSelector: string | undefined;\n\n/**\n * Register a layer for a given host id\n * @param hostId Id of the layer host\n * @param layer Layer instance\n */\nexport function registerLayer(hostId: string, callback: () => void) {\n  if (!_layersByHostId[hostId]) {\n    _layersByHostId[hostId] = [];\n  }\n\n  _layersByHostId[hostId].push(callback);\n\n  const layerHosts = _layerHostsById[hostId];\n\n  if (layerHosts) {\n    for (const layerHost of layerHosts) {\n      layerHost.notifyLayersChanged();\n    }\n  }\n}\n\n/**\n * Unregister a layer for a given host id\n * @param hostId Id of the layer host\n * @param layer Layer instance\n */\nexport function unregisterLayer(hostId: string, callback: () => void) {\n  const layers = _layersByHostId[hostId];\n\n  if (layers) {\n    const idx = layers.indexOf(callback);\n    if (idx >= 0) {\n      layers.splice(idx, 1);\n\n      if (layers.length === 0) {\n        delete _layersByHostId[hostId];\n      }\n    }\n  }\n\n  const layerHosts = _layerHostsById[hostId];\n\n  if (layerHosts) {\n    for (const layerHost of layerHosts) {\n      layerHost.notifyLayersChanged();\n    }\n  }\n}\n\n/**\n * Gets the number of layers currently registered with a host id.\n * @param hostId Id of the layer host.\n * @returns The number of layers currently registered with the host.\n */\nexport function getLayerCount(hostId: string): number {\n  const layers = _layerHostsById[hostId];\n\n  return layers ? layers.length : 0;\n}\n\n/**\n * Gets the Layer Host instance associated with a hostId, if applicable.\n * @param hostId\n * @returns A component ref for the associated layer host.\n */\nexport function getLayerHost(hostId: string): ILayerHost | undefined {\n  const layerHosts = _layerHostsById[hostId];\n\n  return (layerHosts && layerHosts[0]) || undefined;\n}\n\n/**\n * Registers a Layer Host with an associated hostId.\n * @param hostId Id of the layer host\n * @param layerHost layer host instance\n */\nexport function registerLayerHost(hostId: string, layerHost: ILayerHost): void {\n  const layerHosts = _layerHostsById[hostId] || (_layerHostsById[hostId] = []);\n\n  // Insert this at the start of an array to avoid race conditions between mount and unmount.\n  // If a LayerHost is re-mounted, and mount of the new instance may occur before the unmount of the old one.\n  // Putting the new instance at the start of this array ensures that calls to `getLayerHost` will immediately\n  // get the new one even if the old one is around briefly.\n  layerHosts.unshift(layerHost);\n}\n\n/**\n * Unregisters a Layer Host from the associated hostId.\n * @param hostId Id of the layer host\n * @param layerHost layer host instance\n */\nexport function unregisterLayerHost(hostId: string, layerHost: ILayerHost): void {\n  const layerHosts = _layerHostsById[hostId];\n\n  if (layerHosts) {\n    const idx = layerHosts.indexOf(layerHost);\n\n    if (idx >= 0) {\n      layerHosts.splice(idx, 1);\n    }\n\n    if (layerHosts.length === 0) {\n      delete _layerHostsById[hostId];\n    }\n  }\n}\n\n/**\n * Used for notifying applicable Layers that a host is available/unavailable and to re-evaluate Layers that\n * care about the specific host.\n */\nexport function notifyHostChanged(id: string) {\n  if (_layersByHostId[id]) {\n    _layersByHostId[id].forEach(callback => callback());\n  }\n}\n\n/**\n * Sets the default target selector to use when determining the host in which\n * Layered content will be injected into. If not provided, an element will be\n * created at the end of the document body.\n *\n * Passing in a falsy value will clear the default target and reset back to\n * using a created element at the end of document body.\n */\nexport function setDefaultTarget(selector?: string) {\n  _defaultHostSelector = selector;\n}\n\n/**\n * Get the default target selector when determining a host\n */\nexport function getDefaultTarget(): string | undefined {\n  return _defaultHostSelector;\n}\n"]},"metadata":{},"sourceType":"module"}